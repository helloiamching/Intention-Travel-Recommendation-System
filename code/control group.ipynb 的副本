{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["資料匯入"],"metadata":{"id":"o2vad-j087no"}},{"cell_type":"code","execution_count":1,"metadata":{"id":"jbsvKDjH7ATU","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1721908387644,"user_tz":-480,"elapsed":67601,"user":{"displayName":"王晴","userId":"13545761289751374787"}},"outputId":"6b6041cd-1bd1-4f2e-c4cf-9972df5ad26e"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /gdrive\n"]}],"source":["from google.colab import drive\n","drive.mount('/gdrive')"]},{"cell_type":"code","source":["import pandas as pd\n","import numpy as np\n","import random\n","import json\n","import dask.dataframe as dd\n","import rpy2.robjects as robjects\n","from rpy2.robjects.packages import importr\n","from geopy.geocoders import Nominatim\n","from geopy.exc import GeocoderTimedOut\n","import time\n","from tabulate import tabulate\n"],"metadata":{"id":"5pvHtOLOKfFj","executionInfo":{"status":"ok","timestamp":1721908389662,"user_tz":-480,"elapsed":2025,"user":{"displayName":"王晴","userId":"13545761289751374787"}}},"execution_count":2,"outputs":[]},{"cell_type":"code","source":["dtype = {'user_ratings_total': 'Int64'}\n","\n","df_tour = pd.read_csv('/gdrive/Shareddrives/從資料學習2/Dataset & code/cleaning data/tour_data_output.csv', dtype=dtype)\n","df_rest = pd.read_csv('/gdrive/Shareddrives/從資料學習2/Dataset & code/cleaning data/restaurant_data_output.csv', dtype=dtype)"],"metadata":{"id":"9m9EevEQfkko","executionInfo":{"status":"ok","timestamp":1721908393549,"user_tz":-480,"elapsed":3891,"user":{"displayName":"王晴","userId":"13545761289751374787"}}},"execution_count":3,"outputs":[]},{"cell_type":"code","source":["df_tour"],"metadata":{"id":"M-7PIlbzTI-P"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## 景點"],"metadata":{"id":"BXmU1Irg-qii"}},{"cell_type":"markdown","source":["\n","\n","```\n","time, place processing\n","```\n","\n"],"metadata":{"id":"i6WHt7nL-7aP"}},{"cell_type":"code","source":["dif = ['台北市中正區', '台北市大同區', '台北市中山區', '台北市松山區', '台北市大安區', '台北市萬華區', '台北市信義區', '台北市士林區', '台北市北投區', '台北市南港區', '台北市內湖區',\n","       '台北市文山區','新北市板橋區','新北市中和區','新北市新莊區','新北市土城區','新北市汐止區','新北市鶯歌區','新北市淡水區','新北市五股區','新北市林口區','新北市深坑區','新北市坪林區','新北市石門區','新北市萬里區',\n","       '新北市雙溪區','新北市烏來區','新北市三重區','新北市永和區','新北市新店區','新北市蘆洲區','新北市樹林區','新北市三峽區','新北市瑞芳區','新北市泰山區','新北市八里區','新北市石碇區','新北市三芝區','新北市金山區','新北市平溪區','新北市貢寮區'\n","       ,'桃園市中壢區','桃園市平鎮區','桃園市龍潭區','桃園市楊梅區','桃園市新屋區','桃園市觀音區','桃園市桃園區','桃園市龜山區','桃園市八德區','桃園市大溪區','桃園市復興區','桃園市大園區','桃園市蘆竹區',\n","       '基隆市中山區','基隆市中正區','基隆市信義區','基隆市仁愛區','基隆市暖暖區','基隆市七堵區','基隆市安樂區']\n","\n","def match_address(row):\n","    for district in dif:\n","        if district in row['formatted_address']:\n","            return district\n","    return None\n","\n"],"metadata":{"id":"HVddQx2K8hI0"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import json\n","import ast\n","from collections import defaultdict\n","\n","def match_time(row):\n","    # Handle missing data\n","    if pd.isna(row['opening_hours']):\n","        return None\n","\n","    try:\n","        # Convert JSON-like string to dictionary if necessary\n","        if isinstance(row['opening_hours'], str):\n","            opening_hours = ast.literal_eval(row['opening_hours'])\n","        else:\n","            opening_hours = row['opening_hours']\n","    except (json.JSONDecodeError, ValueError):\n","        print(f\"Failed to decode JSON for row: {row['opening_hours']}\")\n","        return None\n","\n","    # Initialize a dictionary to store time categories for each day\n","    day_categories = {day: [] for day in range(7)}\n","\n","    # Handle the case where the 'periods' list contains a single dictionary with 'open': {'day': 0, 'time': '0000'}\n","    if 'open_now' in opening_hours and opening_hours['open_now'] and len(opening_hours['periods']) == 1:\n","        period = opening_hours['periods'][0]\n","        if 'open' in period and period['open']['time'] == '0000':\n","            for day in range(7):\n","                day_categories[day].append('全天')\n","\n","    # Process each day's periods to determine the matching time category\n","    for period in opening_hours.get('periods', []):\n","        if 'open' in period and 'close' in period:\n","            # Ensure both open and close keys are present\n","            open_time = int(period['open']['time'])\n","            close_time = int(period['close']['time'])\n","            day = period['open']['day']\n","\n","            # Check if the current period overlaps with any existing categories\n","            existing_categories = day_categories[day]\n","            if any(category in ['全天', '晚上'] for category in existing_categories):\n","                continue  # Skip if the day already has a higher priority category\n","\n","            # Prioritize time categories\n","            if open_time == 0 and close_time == 2400:\n","                day_categories[day] = ['全天']\n","            elif open_time < 1000 and close_time >= 1800:\n","                day_categories[day] = ['早上', '下午']\n","            elif open_time >= 1800 or close_time >= 2400:\n","                day_categories[day].append('晚上')\n","            elif open_time < 1200:\n","                if '下午' not in day_categories[day]:\n","                    day_categories[day].append('早上')\n","            elif 1200 <= open_time < 1800:\n","                if '早上' not in day_categories[day]:\n","                    day_categories[day].append('下午')\n","\n","    # Join the time categories for each day with a comma separator\n","    day_categories = {day: ', '.join(set(categories)) for day, categories in day_categories.items()}\n","\n","    return day_categories"],"metadata":{"id":"2q-j0N9fFjpv"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["geolocator = Nominatim(user_agent=\"geotest\")\n","\n","def extract_lat(location):\n","    lat_lng_dict = eval(location)\n","    return lat_lng_dict['lat']\n","\n","def extract_lng(location):\n","    lat_lng_dict = eval(location)\n","    return lat_lng_dict['lng']\n"],"metadata":{"id":"nn8we1owPC0n"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["df = df_tour\n","df_outliner = df[df['rating'] > 3.0]\n","Q3_user_ratings_total = np.percentile(df_outliner['user_ratings_total'], 10)\n","df_outliner_total = df_outliner[df_outliner['user_ratings_total'] > Q3_user_ratings_total]\n","df = df_outliner_total\n","df['district'] = df.apply(match_address, axis=1)\n","matched_places = df[df['district'].notnull()]\n","df['lat'] = df['location(lat,lng)'].apply(extract_lat)\n","df['lng'] = df['location(lat,lng)'].apply(extract_lng)\n","df[['星期一', '星期二', '星期三', '星期四', '星期五', '星期六', '星期日']] = df.apply(match_time, axis=1, result_type='expand')\n","df = df[['name', 'rating', 'user_ratings_total', '星期一', '星期二', '星期三', '星期四', '星期五', '星期六', '星期日', 'district','lat','lng']]\n"],"metadata":{"id":"eySo6LbQHpb7","executionInfo":{"status":"ok","timestamp":1716185117139,"user_tz":-480,"elapsed":1784,"user":{"displayName":"王晴","userId":"13545761289751374787"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"7082e0a4-1706-4a12-a6fa-3a0eb7a59efc"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["<ipython-input-10-ef063175c852>:6: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['district'] = df.apply(match_address, axis=1)\n","<ipython-input-10-ef063175c852>:8: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['lat'] = df['location(lat,lng)'].apply(extract_lat)\n","<ipython-input-10-ef063175c852>:9: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df['lng'] = df['location(lat,lng)'].apply(extract_lng)\n","<ipython-input-10-ef063175c852>:10: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df[['星期一', '星期二', '星期三', '星期四', '星期五', '星期六', '星期日']] = df.apply(match_time, axis=1, result_type='expand')\n","<ipython-input-10-ef063175c852>:10: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df[['星期一', '星期二', '星期三', '星期四', '星期五', '星期六', '星期日']] = df.apply(match_time, axis=1, result_type='expand')\n","<ipython-input-10-ef063175c852>:10: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df[['星期一', '星期二', '星期三', '星期四', '星期五', '星期六', '星期日']] = df.apply(match_time, axis=1, result_type='expand')\n","<ipython-input-10-ef063175c852>:10: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df[['星期一', '星期二', '星期三', '星期四', '星期五', '星期六', '星期日']] = df.apply(match_time, axis=1, result_type='expand')\n","<ipython-input-10-ef063175c852>:10: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df[['星期一', '星期二', '星期三', '星期四', '星期五', '星期六', '星期日']] = df.apply(match_time, axis=1, result_type='expand')\n","<ipython-input-10-ef063175c852>:10: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df[['星期一', '星期二', '星期三', '星期四', '星期五', '星期六', '星期日']] = df.apply(match_time, axis=1, result_type='expand')\n","<ipython-input-10-ef063175c852>:10: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df[['星期一', '星期二', '星期三', '星期四', '星期五', '星期六', '星期日']] = df.apply(match_time, axis=1, result_type='expand')\n"]}]},{"cell_type":"markdown","source":["## 餐廳"],"metadata":{"id":"_-BK18d6LTt0"}},{"cell_type":"markdown","source":[],"metadata":{"id":"aNARNkBEOY_6"}},{"cell_type":"code","source":["df_rest_outliner = df_rest[df_rest['rating'] > 3.0]\n","Q3_user_ratings_total = np.percentile(df_rest_outliner['user_ratings_total'], 10)\n","df_rest_outliner_total = df_rest_outliner[df_rest_outliner['user_ratings_total'] > Q3_user_ratings_total]\n","df_rest = df_rest_outliner_total\n","df_rest['lat'] = df_rest['location(lat,lng)'].apply(extract_lat)\n","df_rest['lng'] = df_rest['location(lat,lng)'].apply(extract_lng)\n","df_rest[['星期一', '星期二', '星期三', '星期四', '星期五', '星期六', '星期日']] = df_rest.apply(match_time, axis=1, result_type='expand')\n","df_rest['district'] = df_rest.apply(match_address, axis=1)\n","matched_places = df_rest[df_rest['district'].notnull()]"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"n3JyJROENsmf","executionInfo":{"status":"ok","timestamp":1716185120617,"user_tz":-480,"elapsed":2372,"user":{"displayName":"王晴","userId":"13545761289751374787"}},"outputId":"e06563b6-62e6-47f2-c63c-b1971fc3d94e"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["<ipython-input-11-8002c075d631>:5: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df_rest['lat'] = df_rest['location(lat,lng)'].apply(extract_lat)\n","<ipython-input-11-8002c075d631>:6: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df_rest['lng'] = df_rest['location(lat,lng)'].apply(extract_lng)\n","<ipython-input-11-8002c075d631>:7: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df_rest[['星期一', '星期二', '星期三', '星期四', '星期五', '星期六', '星期日']] = df_rest.apply(match_time, axis=1, result_type='expand')\n","<ipython-input-11-8002c075d631>:7: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df_rest[['星期一', '星期二', '星期三', '星期四', '星期五', '星期六', '星期日']] = df_rest.apply(match_time, axis=1, result_type='expand')\n","<ipython-input-11-8002c075d631>:7: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df_rest[['星期一', '星期二', '星期三', '星期四', '星期五', '星期六', '星期日']] = df_rest.apply(match_time, axis=1, result_type='expand')\n","<ipython-input-11-8002c075d631>:7: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df_rest[['星期一', '星期二', '星期三', '星期四', '星期五', '星期六', '星期日']] = df_rest.apply(match_time, axis=1, result_type='expand')\n","<ipython-input-11-8002c075d631>:7: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df_rest[['星期一', '星期二', '星期三', '星期四', '星期五', '星期六', '星期日']] = df_rest.apply(match_time, axis=1, result_type='expand')\n","<ipython-input-11-8002c075d631>:7: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df_rest[['星期一', '星期二', '星期三', '星期四', '星期五', '星期六', '星期日']] = df_rest.apply(match_time, axis=1, result_type='expand')\n","<ipython-input-11-8002c075d631>:7: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df_rest[['星期一', '星期二', '星期三', '星期四', '星期五', '星期六', '星期日']] = df_rest.apply(match_time, axis=1, result_type='expand')\n","<ipython-input-11-8002c075d631>:8: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df_rest['district'] = df_rest.apply(match_address, axis=1)\n"]}]},{"cell_type":"markdown","source":["# 建構需要輸入的指令(地點、時間、user_rating_total)"],"metadata":{"id":"aClPb8BY-7g9"}},{"cell_type":"markdown","source":["在輸入結果之下，random給予權重\n","取前五顯示"],"metadata":{"id":"eG3nWp_R__N3"}},{"cell_type":"markdown","source":["***更新方向  更改地理及時間設定為權重制***\n","\n","符合input則權重加重，是否要用鄰近加權需要再討論\n"],"metadata":{"id":"TeNDiZxqVQTC"}},{"cell_type":"markdown","source":["# 修改後"],"metadata":{"id":"pEWmHxLYtA3X"}},{"cell_type":"markdown","source":["## 權重"],"metadata":{"id":"Pxe_6mpnNXIn"}},{"cell_type":"code","source":[" #weight_calc2(data_temp.iloc[j],customer_input_temp,customer_input2,w_rating, w_ratings_total, w_distance, choose)\n","\n","def weight_calc2(data_temp, customer_input_temp, customer_input2, w_rating, w_ratings_total, w_distance, choose):\n","    selected_spot = data[data['name'] == customer_input2].iloc[0]\n","    rating_range = (selected_spot['rating_norm'] - 0.2, selected_spot['rating_norm'] + 0.2)\n","    if data_temp['rating_norm'] >= rating_range[0] and data_temp['rating_norm'] <= rating_range[1]:\n","        n = choose\n","        w_rating = w_rating * (1 + 0.3 * (n + 1))\n","        w_ratings_total = w_ratings_total * (1 + 0.3 * (n + 1))\n","        w_distance = w_distance * (1 + 0.3 * (n + 1))\n","        choose += 1  # Increment choose\n","    else:\n","        w_rating = w_rating * 1.1\n","        w_ratings_total = w_ratings_total * 1.1\n","        w_distance = w_distance * 1.1\n","    return w_rating, w_ratings_total, w_distance, choose\n","\n","\n"],"metadata":{"id":"l-cBSt2kmeMn","executionInfo":{"status":"ok","timestamp":1721908393550,"user_tz":-480,"elapsed":7,"user":{"displayName":"王晴","userId":"13545761289751374787"}}},"execution_count":4,"outputs":[]},{"cell_type":"code","source":[" #weight_calc2(data_temp.iloc[j],customer_input_temp,customer_input2,w_rating, w_ratings_total, w_distance, choose)\n","\n","def weight_calc3(data_temp, customer_input_temp, customer_input2, w_rating, w_ratings_total, w_distance, choose):\n","    selected_spot = data[data['name'] == customer_input2].iloc[0]\n","    rating_range = (selected_spot['rating_norm'] - 0.2, selected_spot['rating_norm'] + 0.2)\n","    if data_temp['rating_norm'] >= rating_range[0] and data_temp['rating_norm'] <= rating_range[1]:\n","        n = choose\n","        w_rating = w_rating * (1 + 0.3 * (n + 1))\n","        w_ratings_total = w_ratings_total * (1 + 0.3 * (n + 1))\n","        w_distance = w_distance * (1 + 0.3 * (n + 1))\n","        choose += 1\n","    else:\n","        w_rating = w_rating * 1.1\n","        w_ratings_total = w_ratings_total * 1.1\n","        w_distance = w_distance * 1.1\n","    return w_rating, w_ratings_total, w_distance, choose\n","\n","\n"],"metadata":{"id":"lrGA_MSjv0cy"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def flat_earth_dist(ref_lat, ref_lng, lat, lng):\n","    R = 6371\n","    pi = np.pi\n","    lat1, lon1, lat2, lon2 = map(np.radians, [ref_lat, ref_lng, lat, lng])\n","    x = (lon2 - lon1) * np.cos((lat1 + lat2) / 2)\n","    y = lat2 - lat1\n","    x_km = x * R\n","    y_km = y * R * (pi / 180) * 111\n","    distance = np.sqrt(x_km**2 + y_km**2)\n","    return distance\n"],"metadata":{"id":"GLfsqV1xL9qO"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## Tour + Rest"],"metadata":{"id":"3pcz7Vc3tZOe"}},{"cell_type":"code","source":["m=3\n","w_district = 1\n","w_ratings_total = 1\n","w_rating = 1\n","w_distance = 1\n","count = 0\n","\n","chose_temp = []\n","customer_input = input(\"Please enter your preference of district and weekday (e.g., 台北市中正區 星期一): \")\n","data = df[['name', 'rating', '星期一', '星期二', '星期三', '星期四', '星期五', '星期六', '星期日', 'district', 'user_ratings_total','lat','lng']]\n","data.dropna(subset=['district'], inplace=True)\n","data_rest = df_rest[['name', 'rating', '星期一', '星期二', '星期三', '星期四', '星期五', '星期六', '星期日', 'district', 'user_ratings_total','lat','lng']]\n","data_rest.dropna(subset=['district'], inplace=True)\n","time = ['早上',\"下午\", \"晚上\"]\n","customer_input_temp = []\n","customer_input_r_temp = []\n","customer_input2_data = []\n","delete_temp =[]\n","headers = ['Tourist Spot Name', 'Tourist Spot Rating', 'Nearby Restaurant 1', 'Nearby Restaurant 2', 'Nearby Restaurant 3']\n","header_final = ['Tourist Spot Name', 'Restaurant Name']\n","header_tour_change = ['Restaurant Name 1', 'Restaurant Name 2','Restaurant Name 3']\n","header_rest_change = ['Tour Name 1', 'Tour Name 2','Tour Name 3']\n","while True:\n","  touristspots = []\n","  district, day = customer_input.split()\n","  data['rating_norm'] = (data['rating'] - data['rating'].mean()) / data['rating'].std()\n","  data['user_ratings_total_norm'] = (data['user_ratings_total'] - data['user_ratings_total'].mean()) / data['user_ratings_total'].std()\n","  data['district_norm'] = np.where(data['district'] == district, 1, 0.5)\n","  day_mapping = {'星期一': '星期一', '星期二': '星期二', '星期三': '星期三', '星期四': '星期四', '星期五': '星期五', '星期六': '星期六', '星期日': '星期日'}\n","  column_name = day_mapping.get(day, None)\n","  data_temp_district = data[(data['district'] == district) & ((data[column_name].str.contains(time[1], case=False))|(data[column_name].str.contains('全天', case=False)))]\n","  data_rest_district = data_rest[(data_rest['district'] == district) & ((data_rest[column_name].str.contains(time[0], case=False)))]\n","\n","  data_temp_district['distance'] = np.nan\n","  data_temp_district['distance_norm'] = np.nan\n","  data_temp = data\n","  data_temp['distance'] = np.nan\n","  data_rest_temp = data_rest\n","  data_rest_temp['distance'] = np.nan\n","\n","  data_temp['distance_norm'] = np.nan\n","  data_temp['choose'] = 0\n","  data_temp['w_rating'] = 1\n","  data_temp['w_ratings_total'] = 1\n","  data_temp['w_distance'] = 1\n","\n","\n","  count_change_tour = 0\n","  count_change_rest = 0\n","  if count != 0 :\n","    break\n","  else:\n","\n","    if column_name is None:\n","        print(\"Invalid weekday input.\")\n","        break\n","\n","\n","    while True:\n","\n","      if len(data_temp_district) < 5:\n","          print(\"No matching tourist spot found.\")\n","          break\n","      if len(data_rest_district) < 5:\n","          print(\"No matching restaurant found.\")\n","          break\n","\n","\n","      if count == 0 and count_change_tour ==0 and count_change_rest ==0:\n","        data_temp_district['weight'] = w_rating*data_temp_district['rating_norm'] + w_ratings_total*data_temp_district['user_ratings_total_norm'] + w_district*data_temp_district['district_norm'] + np.random.uniform(0, 1, len(data_temp_district))\n","        touristspots = data_temp_district.nlargest(5, 'weight')\n","        nearby_restaurants = []\n","        headers = ['Tourist Spot Name', 'Tourist Spot Rating', 'Nearby Restaurant 1', 'Nearby Restaurant 2', 'Nearby Restaurant 3']\n","        for i in range(5):\n","            data_rest_district['distance'] = flat_earth_dist(touristspots['lat'].iloc[i], touristspots['lng'].iloc[i], data_rest_district['lat'], data_rest_district['lng'])\n","            data_rest_district_top = data_rest_district[data_rest_district['distance'] < 5]\n","            data_rest_district_top = data_rest_district_top.nlargest(3, 'rating')\n","\n","            tourist_spot_name = touristspots['name'].iloc[i]\n","            tourist_spot_rating = touristspots['rating'].iloc[i]\n","            nearby_restaurant_names = data_rest_district_top['name'].iloc[:3].tolist()\n","\n","            nearby_restaurants.append([tourist_spot_name, tourist_spot_rating] + nearby_restaurant_names)\n","\n","        print(tabulate(nearby_restaurants, headers=headers, tablefmt='grid'))\n","\n","        customer_input_2 = input(\"Please enter your preference spot and distance(km) (e.g., 自由廣場 大嗑西式餐館 10 or , 我都不要 我都不要 10 or 自由廣場 我都不要 10): \")\n","        customer_input2,rest_input, distance_input  = customer_input_2.split()\n","        distance_input = int(distance_input)\n","\n","        if column_name is None:\n","            print(\"Invalid weekday input.\")\n","            break\n","\n","        if customer_input2 == '我都不要' and rest_input == '我都不要':\n","           data_temp_district = data_temp_district[~data_temp_district['name'].isin(touristspots['name'])]\n","           data_temp = data_temp[~data_temp['name'].isin(touristspots['name'])]\n","           data_rest_district = data_rest_district[~data_rest_district['name'].isin(nearby_restaurant_names)]\n","           data_rest_temp = data_rest[~data_rest['name'].isin(nearby_restaurant_names)]\n","\n","\n","        elif customer_input2 != '我都不要' and rest_input == '我都不要':\n","           customer_input_temp.append(customer_input2)\n","           data_rest_district = data_rest_district[~data_rest_district['name'].isin(nearby_restaurant_names)]\n","           data_rest_temp = data_rest[~data_rest['name'].isin(nearby_restaurant_names)]\n","           count_change_tour +=1\n","\n","        elif customer_input2 == '我都不要' and rest_input != '我都不要':\n","           customer_input_r_temp.append(rest_input)\n","           data_temp_district = data_temp_district[~data_temp_district['name'].isin(touristspots['name'])]\n","           data_temp = data_temp[~data_temp['name'].isin(touristspots['name'])]\n","           data_rest_temp = data_rest_temp[data_rest_temp['name'] != rest_input]\n","           count_change_rest +=1\n","\n","        else:\n","          customer_input_temp.append(customer_input2)\n","          customer_input_r_temp.append(rest_input)\n","          data_temp = data_temp[data_temp['name'] != customer_input2]\n","          data_rest_temp = data_rest_temp[data_rest_temp['name'] != rest_input]\n","          count += 1\n","\n","      if count_change_tour != 0:\n","          touristspots = data[data['name'] == customer_input2]\n","          nearby_restaurants_0 = []\n","          data_rest_temp_temp = data_rest_temp[((data_rest_temp[column_name].str.contains(time[count], case=False))|(data_rest_temp[column_name].str.contains('全天', case=False)))]\n","\n","          for i in range(1):\n","                data_rest_temp_temp['distance'] = flat_earth_dist(touristspots['lat'].iloc[i], touristspots['lng'].iloc[i], data_rest_temp_temp['lat'], data_rest_temp_temp['lng'])\n","                data_rest_temp_temp_top = data_rest_temp_temp[data_rest_temp_temp['distance'] < 5]\n","                data_rest_temp_temp_top = data_rest_temp_temp.nlargest(3, 'rating')\n","\n","                tourist_spot_name = touristspots['name'].iloc[i]\n","                tourist_spot_rating = touristspots['rating'].iloc[i]\n","                nearby_restaurant_names = data_rest_temp_temp_top['name'].iloc[:3].tolist()\n","                nearby_restaurants_0.append([tourist_spot_name, tourist_spot_rating] + nearby_restaurant_names)\n","\n","          print(tabulate(nearby_restaurants_0, headers=headers, tablefmt='grid'))\n","          customer_input_2_2 = input(\"Please enter your preference restaurant and distance(km) (e.g.,大嗑西式餐館 10 or , 我都不要 10 ): \")\n","          rest_input, distance_input  = customer_input_2_2.split()\n","          distance_input = int(distance_input)\n","          if rest_input == '我都不要':\n","             data_rest_district = data_rest_district[~data_rest_district['name'].isin(nearby_restaurant_names)]\n","             data_rest_temp = data_rest[~data_rest['name'].isin(nearby_restaurant_names)]\n","          else:\n","             count_change_tour = 0\n","             customer_input_r_temp.append(rest_input)\n","             data_rest_temp = data_rest[~data_rest['name'].isin(nearby_restaurant_names)]\n","             count += 1\n","             if count == m:\n","               data_final = [[time, spot, restaurant] for time, spot, restaurant in zip(time, customer_input_temp, customer_input_r_temp)]\n","               headers = ['Time', 'Tourist Spot Name', 'Restaurant Name']\n","               print(tabulate(data_final, headers=header_tour_change, tablefmt='grid'))\n","               break\n","\n","\n","\n","      if count_change_rest != 0:\n","          touristspots_rest = data_rest[data_rest['name'] == rest_input]\n","          nearby_tour_0 = []\n","          data_temp_temp = data_temp[((data_temp[column_name].str.contains(time[count], case=False))|(data_temp[column_name].str.contains('全天', case=False)))]\n","\n","          for i in range(1):\n","                data_temp_temp['distance'] = flat_earth_dist(touristspots_rest['lat'].iloc[i], touristspots_rest['lng'].iloc[i], data_temp_temp['lat'], data_temp_temp['lng'])\n","                data_temp_temp_top = data_temp_temp[data_temp_temp['distance'] < 5]\n","                data_temp_temp_top = data_temp_temp_top.nlargest(3, 'rating')\n","\n","                rest_spot_name = touristspots_rest['name'].iloc[i]\n","                rest_spot_rating = touristspots_rest['rating'].iloc[i]\n","                nearby_tour_0_names = data_temp_temp_top['name'].iloc[:3].tolist()\n","                nearby_tour_0.append([rest_spot_name, rest_spot_rating] + nearby_tour_0_names)\n","\n","          print(tabulate(nearby_tour_0, headers=header_rest_change, tablefmt='grid'))\n","          customer_input_2_2 = input(\"Please enter your preference restaurant and distance(km) (e.g.,自由廣場 10 or , 我都不要 10 ): \")\n","          customer_input2, distance_input  = customer_input_2_2.split()\n","          distance_input = int(distance_input)\n","          if customer_input2 == '我都不要':\n","             data_district = data_district[~data_district['name'].isin(nearby_restaurant_names)]\n","             data_temp = data_temp[~data_temp['name'].isin(nearby_restaurant_names)]\n","          else:\n","             count_change_rest = 0\n","             customer_input_temp.append(customer_input2)\n","             data_temp = data_temp[~data_temp['name'].isin(nearby_tour_0)]\n","             count += 1\n","             if count == m:\n","               data_final = [[time, spot, restaurant] for time, spot, restaurant in zip(time, customer_input_temp, customer_input_r_temp)]\n","               headers = ['Time', 'Tourist Spot Name', 'Restaurant Name']\n","               print(tabulate(data_final, headers=headers, tablefmt='grid'))\n","               break\n","\n","\n","\n","      if count != 0  and count_change_tour == 0 and count_change_rest == 0:\n","          customer_input2_data = data[data['name']==customer_input2]\n","          data_temp_temp = data_temp[((data_temp[column_name].str.contains(time[count], case=False))|(data_temp[column_name].str.contains('全天', case=False)))]\n","          data_rest_temp_temp = data_rest_temp[((data_rest_temp[column_name].str.contains(time[count], case=False))|(data_rest_temp[column_name].str.contains('全天', case=False)))]\n","\n","          for j in range(0, len(data_temp_temp)):\n","            data_temp_temp['distance'].iloc[j] = flat_earth_dist(data_temp_temp['lat'].iloc[j], data_temp_temp['lng'].iloc[j], customer_input2_data['lat'].iloc[0], customer_input2_data['lng'].iloc[0])\n","          max_distance = data_temp_temp['distance'].max()\n","          min_distance = data_temp_temp['distance'].min()\n","          data_temp_temp['distance_norm'] = (max_distance - data_temp['distance']) / (max_distance - min_distance)\n","\n","          for j in range(0, len(data_temp_temp)):\n","            data_temp_temp['w_rating'].iloc[j], data_temp_temp['w_ratings_total'].iloc[j], data_temp_temp['w_distance'].iloc[j], data_temp_temp['choose'].iloc[j] = weight_calc2(data_temp_temp.iloc[j], customer_input_temp, customer_input2, w_rating, w_ratings_total, w_distance, data_temp['choose'].iloc[j])\n","\n","          data_temp_temp['weight'] = data_temp_temp['w_rating']*data_temp_temp['rating_norm'] + data_temp_temp['w_ratings_total']*data_temp_temp['user_ratings_total_norm'] + data_temp_temp['w_distance']*data_temp_temp['distance_norm'] + np.random.uniform(0, 1, len(data_temp_temp))\n","          data_temp_temp_limit = []\n","          data_temp_temp_limit = data_temp_temp[data_temp_temp['distance'] <= distance_input]\n","          touristspots = data_temp_temp_limit.nlargest(5, 'weight')\n","          nearby_restaurants = []\n","          headers = ['Tourist Spot Name', 'Tourist Spot Rating', 'Nearby Restaurant 1', 'Nearby Restaurant 2', 'Nearby Restaurant 3']\n","          for i in range(5):\n","              data_rest_temp['distance'] = flat_earth_dist(touristspots['lat'].iloc[i], touristspots['lng'].iloc[i], data_rest_temp['lat'], data_rest_temp['lng'])\n","              data_rest_temp_top = data_rest_temp[data_rest_temp['distance'] < distance_input]\n","              data_rest_temp_top = data_rest_temp_top.nlargest(3, 'rating')\n","              tourist_spot_name = touristspots['name'].iloc[i]\n","              tourist_spot_rating = touristspots['rating'].iloc[i]\n","              nearby_restaurant_names = data_rest_temp_top['name'].iloc[:3].tolist()\n","              nearby_restaurants.append([tourist_spot_name, tourist_spot_rating] + nearby_restaurant_names)\n","\n","          print(tabulate(nearby_restaurants, headers=headers, tablefmt='grid'))\n","\n","          customer_input_2 = input(\"Please enter your preference spot and distance(km) (e.g., 新北大都會公園111 鶴料居酒屋 10 or , 我都不要 我都不要 10 or 新北大都會公園 我都不要 10 ): \")\n","          customer_input2, rest_input, distance_input  = customer_input_2.split()\n","          distance_input = int(distance_input)\n","\n","          if customer_input2 == '我都不要' and rest_input == '我都不要':\n","            data_temp_district = data_temp_district[~data_temp_district['name'].isin(touristspots['name'])]\n","            data_temp = data_temp[~data_temp['name'].isin(touristspots['name'])]\n","            data_rest_district = data_rest_district[~data_rest_district['name'].isin(nearby_restaurant_names)]\n","            data_rest_temp = data_rest[~data_rest['name'].isin(nearby_restaurant_names)]\n","\n","          elif customer_input2 != '我都不要' and rest_input == '我都不要':\n","            customer_input_temp.append(customer_input2)\n","            data_rest_temp_temp = data_rest_temp_temp[~data_rest_temp_temp['name'].isin(nearby_restaurant_names)]\n","            count_change_tour +=1\n","            print(customer_input_temp)\n","\n","          elif customer_input2 == '我都不要' and rest_input != '我都不要':\n","            customer_input_r_temp.append(rest_input)\n","            data_temp = data_temp[~data_temp['name'].isin(touristspots['name'])]\n","            data_rest_temp = data_rest_temp[data_rest_temp['name'] != rest_input]\n","            count_change_rest +=1\n","\n","          else:\n","            customer_input_temp.append(customer_input2)\n","            customer_input_r_temp.append(rest_input)\n","            data_temp_temp = data_temp_temp[data_temp_temp['name'] != customer_input2]\n","            data_rest_temp = data_rest_temp[data_rest_temp['name'] != rest_input]\n","            count += 1\n","            if count == m:\n","              data_final = [[time, spot, restaurant] for time, spot, restaurant in zip(time, customer_input_temp, customer_input_r_temp)]\n","              headers = ['Time', 'Tourist Spot Name', 'Restaurant Name']\n","              print(tabulate(data_final, headers=headers, tablefmt='grid'))\n","              break\n"],"metadata":{"id":"OYU7jNimXPPf"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["輸出"],"metadata":{"id":"sEczH83HP7-D"}},{"cell_type":"markdown","source":["根據第一次選擇地點 推薦範圍內地點(標註地區)"],"metadata":{"id":"T3tr31oldX6o"}},{"cell_type":"markdown","source":["## Tourism"],"metadata":{"id":"Q6aoTEVxmRna"}},{"cell_type":"code","source":["m=3\n","w_district = 1\n","w_ratings_total = 1\n","w_rating = 1\n","w_distance = 1\n","count = 0\n","\n","\n","customer_input = input(\"Please enter your preference of district, weekday, and time (e.g., 台北市中正區 星期一 全天): \")\n","data = df[['name', 'rating', '星期一', '星期二', '星期三', '星期四', '星期五', '星期六', '星期日', 'district', 'user_ratings_total','lat','lng']]\n","data.dropna(subset=['district'], inplace=True)\n","data_rest = df_rest[['name', 'rating', '星期一', '星期二', '星期三', '星期四', '星期五', '星期六', '星期日', 'user_ratings_total','lat','lng']]\n","\n","customer_input_temp = []\n","customer_input2_data = []\n","delete_temp =[]\n","while True:\n","  touristspots = []\n","  district, day, time_category = customer_input.split()\n","  data['rating_norm'] = (data['rating'] - data['rating'].mean()) / data['rating'].std()\n","  data['user_ratings_total_norm'] = (data['user_ratings_total'] - data['user_ratings_total'].mean()) / data['user_ratings_total'].std()\n","  data['district_norm'] = np.where(data['district'] == district, 1, 0.5)\n","  day_mapping = {'星期一': '星期一', '星期二': '星期二', '星期三': '星期三', '星期四': '星期四', '星期五': '星期五', '星期六': '星期六', '星期日': '星期日'}\n","  column_name = day_mapping.get(day, None)\n","  data_temp_district = data[(data['district'] == district) & (data[column_name].str.contains(time_category, case=False))]\n","  data_temp_district['distance'] = np.nan\n","  data_temp_district['distance_norm'] = np.nan\n","  data_temp = data[data[column_name].str.contains(time_category, case=False, na=False)]\n","  data_temp['distance'] = np.nan\n","  data_temp['distance_norm'] = np.nan\n","  data_temp['choose'] = 0\n","  data_temp['w_rating'] = 1\n","  data_temp['w_ratings_total'] = 1\n","  data_temp['w_distance'] = 1\n","  if count != 0 :\n","    break\n","  else:\n","\n","    if column_name is None:\n","        print(\"Invalid weekday input.\")\n","        break\n","\n","\n","    while True:\n","      if data_temp.empty:\n","          print(\"No matching tourist spot found.\")\n","          break\n","\n","\n","      if count == 0:\n","        data_temp_district['weight'] = w_rating*data_temp_district['rating_norm'] + w_ratings_total*data_temp_district['user_ratings_total_norm'] + w_district*data_temp_district['district_norm'] + np.random.uniform(0, 1, len(data_temp_district))\n","        touristspots = data_temp_district.nlargest(5, 'weight')\n","        for j in range(0, len(data_temp)):\n","          data_rest['distance'].iloc[j] = flat_earth_dist(data_temp['lat'].iloc[j], data_temp['lng'].iloc[j], data_rest['lat'].iloc[0], data_rest['lng'].iloc[0])\n","\n","        restspots = data_rest['distance'< 5].nlarget(5,'rating')\n","        outputspots = touristspots.append(restspots)\n","\n","\n","        print(touristspots[['name', 'rating','district','weight']])\n","        customer_input_2 = input(\"Please enter your preference spot and distance(km) (e.g., 自由廣場 10 or , 我都不要 10 ): \")\n","        customer_input2, distance_input  = customer_input_2.split()\n","        if column_name is None:\n","            print(\"Invalid weekday input.\")\n","            break\n","        if customer_input2 == '我都不要':\n","           data_temp_district = data_temp_district[~data_temp_district['name'].isin(touristspots['name'])]\n","           data_temp = data_temp[~data_temp['name'].isin(touristspots['name'])]\n","        else:\n","          customer_input_temp.append(customer_input2)\n","          data_temp = data_temp[data_temp['name'] != customer_input2]\n","          count += 1\n","\n","\n","      if count != 0 & count != m-1:\n","\n","        if customer_input2 == '我都不要':\n","          data_temp = data_temp[~data_temp['name'].isin(touristspots['name'])]\n","        else:\n","          customer_input_temp.append(customer_input2)\n","          data_temp = data_temp[data_temp['name'] != customer_input2]\n","          count += 1\n","\n","          customer_input2_data = data[data['name'] == customer_input2]\n","          for j in range(0, len(data_temp)):\n","            data_temp['distance'].iloc[j] = flat_earth_dist(data_temp['lat'].iloc[j], data_temp['lng'].iloc[j], customer_input2_data['lat'].iloc[0], customer_input2_data['lng'].iloc[0])\n","          max_distance = data_temp['distance'].max()\n","          min_distance = data_temp['distance'].min()\n","          data_temp['distance_norm'] = (max_distance - data_temp['distance']) / (max_distance - min_distance)\n","\n","          for j in range(0, len(data_temp)):\n","            data_temp['w_rating'].iloc[j], data_temp['w_ratings_total'].iloc[j], data_temp['w_distance'].iloc[j], data_temp['choose'].iloc[j] = weight_calc2(data_temp.iloc[j], customer_input_temp, customer_input2, w_rating, w_ratings_total, w_distance, data_temp['choose'].iloc[j])\n","\n","          data_temp['weight'] = data_temp['w_rating']*data_temp['rating_norm'] + data_temp['w_ratings_total']*data_temp['user_ratings_total_norm'] + data_temp['w_distance']*data_temp['distance_norm'] + np.random.uniform(0, 1, len(data_temp))\n","        distance_input = float(distance_input)\n","        data_temp_limit = data_temp[data_temp['distance'] <= distance_input]\n","        touristspots = data_temp_limit.nlargest(5, 'weight')\n","        print(touristspots[['name', 'rating','district','weight']])\n","        customer_input_2 = input(\"Please enter your preference spot and distance(km) (e.g., 大安森林公園 10 or , 我都不要 10 ): \")\n","        customer_input2, distance_input  = customer_input_2.split()\n","\n","\n","      if count == m:\n","        print(customer_input_temp)\n","        break\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"HHbozhwJoxbn","executionInfo":{"status":"ok","timestamp":1715749986231,"user_tz":-480,"elapsed":41203,"user":{"displayName":"王晴","userId":"13545761289751374787"}},"outputId":"88473665-735d-4fcc-eb33-4c6a1a6d37fc"},"execution_count":null,"outputs":[{"name":"stdout","output_type":"stream","text":["Please enter your preference of district, weekday, and time (e.g., 台北市中正區 星期一 全天): 台北市中正區 星期一 全天\n"]},{"output_type":"stream","name":"stderr","text":["<ipython-input-12-475d6a14857e>:11: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  data.dropna(subset=['district'], inplace=True)\n","<ipython-input-12-475d6a14857e>:19: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  data['rating_norm'] = (data['rating'] - data['rating'].mean()) / data['rating'].std()\n","<ipython-input-12-475d6a14857e>:20: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  data['user_ratings_total_norm'] = (data['user_ratings_total'] - data['user_ratings_total'].mean()) / data['user_ratings_total'].std()\n","<ipython-input-12-475d6a14857e>:21: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  data['district_norm'] = np.where(data['district'] == district, 1, 0.5)\n","<ipython-input-12-475d6a14857e>:25: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  data_temp_district['distance'] = np.nan\n","<ipython-input-12-475d6a14857e>:26: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  data_temp_district['distance_norm'] = np.nan\n","<ipython-input-12-475d6a14857e>:28: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  data_temp['distance'] = np.nan\n","<ipython-input-12-475d6a14857e>:29: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  data_temp['distance_norm'] = np.nan\n","<ipython-input-12-475d6a14857e>:30: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  data_temp['choose'] = 0\n","<ipython-input-12-475d6a14857e>:31: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  data_temp['w_rating'] = 1\n","<ipython-input-12-475d6a14857e>:32: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  data_temp['w_ratings_total'] = 1\n","<ipython-input-12-475d6a14857e>:33: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  data_temp['w_distance'] = 1\n","<ipython-input-12-475d6a14857e>:50: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  data_temp_district['weight'] = w_rating*data_temp_district['rating_norm'] + w_ratings_total*data_temp_district['user_ratings_total_norm'] + w_district*data_temp_district['district_norm'] + np.random.uniform(0, 1, len(data_temp_district))\n"]},{"name":"stdout","output_type":"stream","text":["              name  rating district    weight\n","53            自由廣場     4.6   台北市中正區  4.433133\n","424           北門廣場     4.5   台北市中正區  2.517909\n","962  臺北府城 北門 (承恩門）     4.4   台北市中正區  2.202712\n","19          自由廣場牌樓     4.5   台北市中正區   2.13649\n","12          中央藝文公園     4.4   台北市中正區  1.914236\n","Please enter your preference spot and distance(km) (e.g., 自由廣場 10 or , 我都不要 10 ): 自由廣場牌樓 10\n"]},{"output_type":"stream","name":"stderr","text":["<ipython-input-12-475d6a14857e>:78: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  data_temp['distance'].iloc[j] = flat_earth_dist(data_temp['lat'].iloc[j], data_temp['lng'].iloc[j], customer_input2_data['lat'].iloc[0], customer_input2_data['lng'].iloc[0])\n","<ipython-input-12-475d6a14857e>:84: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  data_temp['w_rating'].iloc[j], data_temp['w_ratings_total'].iloc[j], data_temp['w_distance'].iloc[j], data_temp['choose'].iloc[j] = weight_calc2(data_temp.iloc[j], customer_input_temp, customer_input2, w_rating, w_ratings_total, w_distance, data_temp['choose'].iloc[j])\n"]},{"name":"stdout","output_type":"stream","text":["           name  rating district    weight\n","14       大安森林公園     4.5   台北市大安區  8.754183\n","53         自由廣場     4.6   台北市中正區  4.695586\n","816     新北大都會公園     4.6   新北市三重區  4.617925\n","49           象山     4.7   台北市信義區   4.06332\n","11   南港公園（防災公園）     4.5   台北市南港區  3.826041\n","Please enter your preference spot and distance(km) (e.g., 大安森林公園 10 or , 我都不要 10 ): 大安森林公園 10\n"]},{"output_type":"stream","name":"stderr","text":["<ipython-input-12-475d6a14857e>:78: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  data_temp['distance'].iloc[j] = flat_earth_dist(data_temp['lat'].iloc[j], data_temp['lng'].iloc[j], customer_input2_data['lat'].iloc[0], customer_input2_data['lng'].iloc[0])\n","<ipython-input-12-475d6a14857e>:84: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  data_temp['w_rating'].iloc[j], data_temp['w_ratings_total'].iloc[j], data_temp['w_distance'].iloc[j], data_temp['choose'].iloc[j] = weight_calc2(data_temp.iloc[j], customer_input_temp, customer_input2, w_rating, w_ratings_total, w_distance, data_temp['choose'].iloc[j])\n"]},{"output_type":"stream","name":"stdout","text":["           name  rating district    weight\n","53         自由廣場     4.6   台北市中正區  5.070486\n","816     新北大都會公園     4.6   新北市三重區  4.254368\n","10         松犬小屋     4.9   台北市信義區   4.20496\n","11   南港公園（防災公園）     4.5   台北市南港區  4.051778\n","67          象山峯     4.8   台北市信義區  3.893157\n","Please enter your preference spot and distance(km) (e.g., 大安森林公園 10 or , 我都不要 10 ): 新北大都會公園 10\n","['自由廣場牌樓', '自由廣場牌樓', '大安森林公園']\n"]},{"output_type":"stream","name":"stderr","text":["<ipython-input-12-475d6a14857e>:19: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  data['rating_norm'] = (data['rating'] - data['rating'].mean()) / data['rating'].std()\n","<ipython-input-12-475d6a14857e>:20: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  data['user_ratings_total_norm'] = (data['user_ratings_total'] - data['user_ratings_total'].mean()) / data['user_ratings_total'].std()\n","<ipython-input-12-475d6a14857e>:21: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  data['district_norm'] = np.where(data['district'] == district, 1, 0.5)\n","<ipython-input-12-475d6a14857e>:25: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  data_temp_district['distance'] = np.nan\n","<ipython-input-12-475d6a14857e>:26: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  data_temp_district['distance_norm'] = np.nan\n","<ipython-input-12-475d6a14857e>:28: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  data_temp['distance'] = np.nan\n","<ipython-input-12-475d6a14857e>:29: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  data_temp['distance_norm'] = np.nan\n","<ipython-input-12-475d6a14857e>:30: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  data_temp['choose'] = 0\n","<ipython-input-12-475d6a14857e>:31: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  data_temp['w_rating'] = 1\n","<ipython-input-12-475d6a14857e>:32: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  data_temp['w_ratings_total'] = 1\n","<ipython-input-12-475d6a14857e>:33: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  data_temp['w_distance'] = 1\n"]}]},{"cell_type":"markdown","source":["建構需要輸入的指令(地點、時間、素食、價位)"],"metadata":{"id":"dUgaux7R862D"}},{"cell_type":"markdown","source":["## 備用\n"],"metadata":{"id":"BUX2tlKlc0vJ"}},{"cell_type":"markdown","source":["## 餐廳 + 景點"],"metadata":{"id":"Rl1ybWXY-msc"}},{"cell_type":"code","source":["m=3\n","w_district = 1\n","w_ratings_total = 1\n","w_rating = 1\n","w_distance = 1\n","count = 0\n","\n","\n","customer_input = input(\"Please enter your preference of district, weekday, and time (e.g., 台北市中正區 星期一 全天): \")\n","data = df[['name', 'rating', '星期一', '星期二', '星期三', '星期四', '星期五', '星期六', '星期日', 'district', 'user_ratings_total','lat','lng']]\n","data.dropna(subset=['district'], inplace=True)\n","\n","customer_input_temp = []\n","customer_input2_data = []\n","delete_temp =[]\n","\n","while True:\n","  touristspots = []\n","  district, day, time_category = customer_input.split()\n","  data['rating_norm'] = (data['rating'] - data['rating'].mean()) / data['rating'].std()\n","  data['user_ratings_total_norm'] = (data['user_ratings_total'] - data['user_ratings_total'].mean()) / data['user_ratings_total'].std()\n","  data['district_norm'] = np.where(data['district'] == district, 1, 0.5)\n","  day_mapping = {'星期一': '星期一', '星期二': '星期二', '星期三': '星期三', '星期四': '星期四', '星期五': '星期五', '星期六': '星期六', '星期日': '星期日'}\n","  column_name = day_mapping.get(day, None)\n","  data_temp_district = data[(data['district'] == district) & (data[column_name].str.contains(time_category, case=False))]\n","  data_temp_district['distance'] = np.nan\n","  data_temp_district['distance_norm'] = np.nan\n","  data_temp = data[data[column_name].str.contains(time_category, case=False, na=False)]\n","  data_temp['distance'] = np.nan\n","  data_temp['distance_norm'] = np.nan\n","  data_temp['choose'] = 0\n","  data_temp['w_rating'] = 1\n","  data_temp['w_ratings_total'] = 1\n","  data_temp['w_distance'] = 1\n","  if count != 0 :\n","    break\n","  else:\n","\n","    if column_name is None:\n","        print(\"Invalid weekday input.\")\n","        break\n","\n","\n","    while True:\n","      if data_temp.empty:\n","          print(\"No matching tourist spot found.\")\n","          break\n","\n","\n","      if count == 0:\n","        data_temp_district['weight'] = w_rating*data_temp_district['rating_norm'] + w_ratings_total*data_temp_district['user_ratings_total_norm'] + w_district*data_temp_district['district_norm'] + np.random.uniform(0, 1, len(data_temp_district))\n","        touristspots = data_temp_district.nlargest(5, 'weight')\n","        print(touristspots[['name', 'rating','district','weight']])\n","        customer_input_2 = input(\"Please enter your preference spot and distance(km) (e.g., 自由廣場 10 or , 我都不要 10 ): \")\n","        customer_input2, distance_input  = customer_input_2.split()\n","        if column_name is None:\n","            print(\"Invalid weekday input.\")\n","            break\n","        if customer_input2 == '我都不要':\n","           data_temp_district = data_temp_district[~data_temp_district['name'].isin(touristspots['name'])]\n","           data_temp = data_temp[~data_temp['name'].isin(touristspots['name'])]\n","        else:\n","          customer_input_temp.append(customer_input2)\n","          data_temp = data_temp[data_temp['name'] != customer_input2]\n","          count += 1\n","\n","\n","      if count != 0 & count != m-1:\n","\n","        if customer_input2 == '我都不要':\n","          data_temp = data_temp[~data_temp['name'].isin(touristspots['name'])]\n","        else:\n","          customer_input_temp.append(customer_input2)\n","          data_temp = data_temp[data_temp['name'] != customer_input2]\n","          count += 1\n","\n","          customer_input2_data = data[data['name'] == customer_input2]\n","          for j in range(0, len(data_temp)):\n","            data_temp['distance'].iloc[j] = flat_earth_dist(data_temp['lat'].iloc[j], data_temp['lng'].iloc[j], customer_input2_data['lat'].iloc[0], customer_input2_data['lng'].iloc[0])\n","          max_distance = data_temp['distance'].max()\n","          min_distance = data_temp['distance'].min()\n","          data_temp['distance_norm'] = (max_distance - data_temp['distance']) / (max_distance - min_distance)\n","\n","          for j in range(0, len(data_temp)):\n","            data_temp['w_rating'].iloc[j], data_temp['w_ratings_total'].iloc[j], data_temp['w_distance'].iloc[j], data_temp['choose'].iloc[j] = weight_calc2(data_temp.iloc[j], customer_input_temp, customer_input2, w_rating, w_ratings_total, w_distance, data_temp['choose'].iloc[j])\n","\n","          data_temp['weight'] = data_temp['w_rating']*data_temp['rating_norm'] + data_temp['w_ratings_total']*data_temp['user_ratings_total_norm'] + data_temp['w_distance']*data_temp['distance_norm'] + np.random.uniform(0, 1, len(data_temp))\n","        distance_input = float(distance_input)\n","        data_temp_limit = data_temp[data_temp['distance'] <= distance_input]\n","        touristspots = data_temp_limit.nlargest(5, 'weight')\n","        print(touristspots[['name', 'rating','district','weight']])\n","        customer_input_2 = input(\"Please enter your preference spot and distance(km) (e.g., 大安森林公園 10 or , 我都不要 10 ): \")\n","        customer_input2, distance_input  = customer_input_2.split()\n","\n","\n","      if count == m:\n","        print(customer_input_temp)\n","        break\n","\n"],"metadata":{"id":"7U7d9JKs-Ysa","colab":{"base_uri":"https://localhost:8080/","height":373},"executionInfo":{"status":"error","timestamp":1715960342344,"user_tz":-480,"elapsed":3946,"user":{"displayName":"王晴","userId":"13545761289751374787"}},"outputId":"d3884133-5453-41c1-c59b-f4cf2e2a573b"},"execution_count":null,"outputs":[{"name":"stdout","output_type":"stream","text":["Please enter your preference of district, weekday, and time (e.g., 台北市中正區 星期一 全天): 台北市中正區 星期一 全天\n"]},{"output_type":"error","ename":"KeyError","evalue":"\"['星期一', '星期二', '星期三', '星期四', '星期五', '星期六', '星期日'] not in index\"","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)","\u001b[0;32m<ipython-input-24-9fe4b1725040>\u001b[0m in \u001b[0;36m<cell line: 10>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      8\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      9\u001b[0m \u001b[0mcustomer_input\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0minput\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Please enter your preference of district, weekday, and time (e.g., 台北市中正區 星期一 全天): \"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 10\u001b[0;31m \u001b[0mdata\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdf\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'name'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'rating'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'星期一'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'星期二'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'星期三'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'星期四'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'星期五'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'星期六'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'星期日'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'district'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'user_ratings_total'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m'lat'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m'lng'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     11\u001b[0m \u001b[0mdata\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdropna\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msubset\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'district'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minplace\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     12\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/frame.py\u001b[0m in \u001b[0;36m__getitem__\u001b[0;34m(self, key)\u001b[0m\n\u001b[1;32m   3765\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mis_iterator\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3766\u001b[0m                 \u001b[0mkey\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlist\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 3767\u001b[0;31m             \u001b[0mindexer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_get_indexer_strict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"columns\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   3768\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3769\u001b[0m         \u001b[0;31m# take() does not accept boolean indexers\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/indexes/base.py\u001b[0m in \u001b[0;36m_get_indexer_strict\u001b[0;34m(self, key, axis_name)\u001b[0m\n\u001b[1;32m   5875\u001b[0m             \u001b[0mkeyarr\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mindexer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnew_indexer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_reindex_non_unique\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkeyarr\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   5876\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 5877\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_raise_if_missing\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkeyarr\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mindexer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis_name\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   5878\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   5879\u001b[0m         \u001b[0mkeyarr\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtake\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mindexer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/indexes/base.py\u001b[0m in \u001b[0;36m_raise_if_missing\u001b[0;34m(self, key, indexer, axis_name)\u001b[0m\n\u001b[1;32m   5939\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   5940\u001b[0m             \u001b[0mnot_found\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlist\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mensure_index\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mmissing_mask\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnonzero\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0munique\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 5941\u001b[0;31m             \u001b[0;32mraise\u001b[0m \u001b[0mKeyError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mf\"{not_found} not in index\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   5942\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   5943\u001b[0m     \u001b[0;34m@\u001b[0m\u001b[0moverload\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyError\u001b[0m: \"['星期一', '星期二', '星期三', '星期四', '星期五', '星期六', '星期日'] not in index\""]}]},{"cell_type":"code","source":["m=3\n","count = 0\n","\n","customer_input = input(\"Please enter your preference of district, weekday, and time (e.g., 台北市中正區 星期一 全天): \")\n","data = df_tour[['name', 'rating', '星期一', '星期二', '星期三', '星期四', '星期五', '星期六', '星期日', 'district', 'user_ratings_total','lat','lng']]\n","customer_input_temp = []\n","customer_input2_data = []\n","delete_temp =[]\n","while True:\n","  touristspots = []\n","  district, day, time_category = customer_input.split()\n","  data['rating_norm'] = (data['rating'] - data['rating'].mean()) / data['rating'].std()\n","  data['user_ratings_total_norm'] = (data['user_ratings_total'] - data['user_ratings_total'].mean()) / data['user_ratings_total'].std()\n","  data['district_norm'] = np.where(data['district'] == district, 1, 0.5)\n","\n","  day_mapping = {'星期一': '星期一', '星期二': '星期二', '星期三': '星期三', '星期四': '星期四', '星期五': '星期五', '星期六': '星期六', '星期日': '星期日'}\n","  column_name = day_mapping.get(day, None)\n","  data_temp = data[(data['district'] == district) & (data[column_name].str.contains(time_category, case=False))]\n","  data_temp['distance'] = np.nan\n","  data_temp['distance_norm'] = np.nan\n","\n","  if count != 0 :\n","    break\n","  else:\n","\n","    if column_name is None:\n","        print(\"Invalid weekday input.\")\n","        break\n","    for i in range(m):\n","      if data_temp.empty:\n","          print(\"No matching tourist spot found.\")\n","          break\n","      if count == 0:\n","        data_temp['weight'] = w_rating*data_temp['rating_norm'] + w_ratings_total*data_temp['user_ratings_total_norm'] + w_district*data_temp['district_norm'] + np.random.uniform(0, 1, len(data_temp))\n","        touristspots = data_temp.nlargest(3, 'weight')\n","        print(touristspots[['name', 'rating','district','weight']])\n","        customer_input2 = input(\"Please enter your preference spot  (e.g., 木柵河濱公園 or , 我都不要): \")\n","        if customer_input2 == '我都不要':\n","          data_temp = data_temp[~data_temp['name'].isin(touristspots['name'])]\n","        else:\n","          customer_input_temp.append(customer_input2)\n","          data_temp = data_temp[data_temp['name'] != customer_input2]\n","          count += 1\n","      if count != 0 & count != m-1:\n","        customer_input2_data = data[data['name'] == customer_input2]\n","        for j in range(0, len(data_temp)):\n","           data_temp['distance'].iloc[j] = flat_earth_dist(data_temp['lat'].iloc[j], data_temp['lng'].iloc[j], customer_input2_data['lat'].iloc[0], customer_input2_data['lng'].iloc[0])\n","        data_temp['distance_norm'] = np.where(data_temp['distance'] <= 3, 1, 0.5)\n","        for j in range(0, len(data_temp)):\n","          w_rating, w_ratings_total, w_distance= weight_calc2(customer_input2_data,data_temp.iloc[j],customer_input2,w_rating, w_ratings_total, w_distance)\n","        data_temp['weight'] = w_rating*data_temp['rating_norm'] + w_ratings_total*data_temp['user_ratings_total_norm'] + w_distance*data_temp['distance_norm'] + np.random.uniform(0, 1, len(data_temp))\n","        touristspots = data_temp.nlargest(3, 'weight')\n","        print(touristspots[['name', 'rating','district','weight']], \"我都不要\")\n","        customer_input2 = input(\"Please enter your preference spot  (e.g., 木柵河濱公園): \")\n","        if customer_input2 == '我都不要':\n","          data_temp = data_temp[~data_temp['name'].isin(touristspots['name'])]\n","        else:\n","          customer_input_temp.append(customer_input2)\n","          data_temp = data_temp[data_temp['name'] != customer_input2]\n","          count += 1\n","      if count == m:\n","        print(customer_input_temp)\n","        break\n","\n","\n"],"metadata":{"id":"18cfoVIDNgRX"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["m=3\n","count = 0\n","\n","customer_input = input(\"Please enter your preference of district, weekday, and time (e.g., 台北市中正區 星期一 全天): \")\n","data = df_tour[['name', 'rating', '星期一', '星期二', '星期三', '星期四', '星期五', '星期六', '星期日', 'district', 'user_ratings_total','lat','lng']]\n","customer_input_temp = []\n","delete_temp =[]\n","while True:\n","  touristspots = []\n","  district, day, time_category = customer_input.split()\n","  data['rating_norm'] = (data['rating'] - data['rating'].mean()) / data['rating'].std()\n","  data['user_ratings_total_norm'] = (data['user_ratings_total'] - data['user_ratings_total'].mean()) / data['user_ratings_total'].std()\n","  data['district_norm'] = np.where(data['district'] == district, 1, 0.5)\n","  day_mapping = {'星期一': '星期一', '星期二': '星期二', '星期三': '星期三', '星期四': '星期四', '星期五': '星期五', '星期六': '星期六', '星期日': '星期日'}\n","  column_name = day_mapping.get(day, None)\n","  data_temp = data[(data['district'] == district) & (data[column_name].str.contains(time_category, case=False))]\n","  if count == m+1 :\n","      break\n","  else:\n","\n","    if column_name is None:\n","        print(\"Invalid weekday input.\")\n","        break\n","    for i in range(m):\n","      if data_temp.empty:\n","          print(\"No matching tourist spot found.\")\n","          break\n","      if count == 0:\n","        data_temp['distance'] =\n","        data_temp['weight'] = w_rating*data_temp['rating_norm'] + w_ratings_total*data_temp['user_ratings_total_norm'] + w_district*data_temp['district_norm'] + np.random.uniform(0, 1, len(data_temp))\n","        touristspots = data_temp.nlargest(3, 'weight')\n","        print(touristspots[['name', 'rating','district','weight']])\n","        customer_input2 = input(\"Please enter your preference spot  (e.g., 木柵河濱公園 or , 我都不要): \")\n","        if customer_input2 == '我都不要':\n","          data_temp = data_temp[~data_temp['name'].isin(touristspots['name'])]\n","        else:\n","          customer_input_temp.append(customer_input2)\n","          data_temp = data_temp[data_temp['name'] != customer_input2]\n","          count += 1\n","      if count != 0 & count != m-1:\n","        w_rating, w_ratings_total, w_district = weight_calc(data,customer_input2,w_rating, w_ratings_total, w_district)\n","        data_temp['weight'] = w_rating*data_temp['rating_norm'] + w_ratings_total*data_temp['user_ratings_total_norm'] + w_district*data_temp['district_norm'] + np.random.uniform(0, 1, len(data_temp))\n","        touristspots = data_temp.nlargest(3, 'weight')\n","        count += 1\n","        print(touristspots[['name', 'rating','district','weight']], \"我都不要\")\n","        customer_input2 = input(\"Please enter your preference spot  (e.g., 木柵河濱公園): \")\n","        if customer_input2 == '我都不要':\n","          data_temp = data_temp[~data_temp['name'].isin(touristspots['name'])]\n","        else:\n","          customer_input_temp.append(customer_input2)\n","          data_temp = data_temp[data_temp['name'] != customer_input2]\n","          count += 1\n","\n","print(customer_input_temp)\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":211},"id":"GiWNNumqMlx-","executionInfo":{"status":"error","timestamp":1715146774221,"user_tz":-480,"elapsed":516,"user":{"displayName":"王晴","userId":"13545761289751374787"}},"outputId":"5dde6e5e-497d-4c98-bed1-6193df069bce"},"execution_count":null,"outputs":[{"output_type":"error","ename":"SyntaxError","evalue":"invalid syntax (<ipython-input-24-9c073025a848>, line 29)","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mSyntaxError\u001b[0m                               Traceback (most recent call last)","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/IPython/core/compilerop.py\u001b[0m in \u001b[0;36mast_parse\u001b[0;34m(self, source, filename, symbol)\u001b[0m\n\u001b[1;32m     99\u001b[0m         \u001b[0mArguments\u001b[0m \u001b[0mare\u001b[0m \u001b[0mexactly\u001b[0m \u001b[0mthe\u001b[0m \u001b[0msame\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mast\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mparse\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0;32min\u001b[0m \u001b[0mthe\u001b[0m \u001b[0mstandard\u001b[0m \u001b[0mlibrary\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    100\u001b[0m         and are passed to the built-in compile function.\"\"\"\n\u001b[0;32m--> 101\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mcompile\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msource\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfilename\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msymbol\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mflags\u001b[0m \u001b[0;34m|\u001b[0m \u001b[0mPyCF_ONLY_AST\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    102\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    103\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mreset_compiler_flags\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mSyntaxError\u001b[0m: invalid syntax (<ipython-input-24-9c073025a848>, line 29)"]}]},{"cell_type":"code","source":["custom_input = input(\"Please enter your preference of district, weekday, and time (e.g., 台北市中山區 星期一 全天): \")\n","data = df_tour[['name', 'rating', '星期一', '星期二', '星期三', '星期四', '星期五', '星期六', '星期日', 'district', 'user_ratings_total']]\n","while True:\n","  touristspots = []\n","  district, day, time_category = custom_input.split()\n","  data['rating_norm'] = (data['rating'] - data['rating'].mean()) / data['rating'].std()\n","  data['user_ratings_total_norm'] = (data['user_ratings_total'] - data['user_ratings_total'].mean()) / data['user_ratings_total'].std()\n","  data['district_norm'] = np.where(data['district'] == district, 1, 0.5)\n","  day_mapping = {'星期一': '星期一', '星期二': '星期二', '星期三': '星期三', '星期四': '星期四', '星期五': '星期五', '星期六': '星期六', '星期日': '星期日'}\n","  column_name = day_mapping.get(day, None)\n","  if column_name is None:\n","      print(\"Invalid weekday input.\")\n","      break\n","\n","  data_temp = data[(data['district'] == district) & (data[column_name].str.contains(time_category, case=False))]\n","\n","  if data_temp.empty:\n","      print(\"No matching tourist spot found.\")\n","      break\n","\n","  if count != 0:\n","      w_rating, w_ratings_total, w_district = weight_calc(data,customer_input2,w_rating, w_ratings_total, w_district)\n","      data_temp['weight'] = w_rating*data_temp['rating_norm'] + w_ratings_total*data_temp['user_ratings_total_norm'] + w_district*data_temp['district_norm'] + np.random.uniform(0, 1, len(data_temp))\n","      touristspots = data_temp.nlargest(10, 'weight')\n","      count += 1\n","      print(touristspots[['name', 'rating','district','weight']])\n","      customer_input2 = input(\"Please enter your preference spot  (e.g., 木柵河濱公園): \")\n","  else:\n","    data_temp['weight'] = w_rating*data_temp['rating_norm'] + w_ratings_total*data_temp['user_ratings_total_norm'] + w_district*data_temp['district_norm'] + np.random.uniform(0, 1, len(data_temp))\n","    touristspots = data_temp.nlargest(10, 'weight')\n","    count += 1\n","    print(touristspots[['name', 'rating','district','weight']])\n","    customer_input2 = input(\"Please enter your preference spot  (e.g., 木柵河濱公園): \")\n","\n"],"metadata":{"id":"V1uHhE7lczcb","colab":{"base_uri":"https://localhost:8080/","height":584},"executionInfo":{"status":"error","timestamp":1715055106560,"user_tz":-480,"elapsed":13440,"user":{"displayName":"王晴","userId":"13545761289751374787"}},"outputId":"1bccb32f-e0a9-42e3-bccb-0ce2eab469db"},"execution_count":null,"outputs":[{"name":"stdout","output_type":"stream","text":["Please enter your preference of district, weekday, and time (e.g., 台北市中山區 星期一 全天): 台北市中山區 星期一 全天\n"]},{"output_type":"stream","name":"stderr","text":["<ipython-input-32-58fc2814d288>:29: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  data_temp['weight'] = w_rating*data_temp['rating_norm'] + w_ratings_total*data_temp['user_ratings_total_norm'] + w_district*data_temp['district_norm'] + np.random.uniform(0, 1, len(data_temp))\n"]},{"output_type":"stream","name":"stdout","text":["        name  rating district    weight\n","7     圓山河濱公園     4.2   台北市中山區  1.235346\n","208     永靜公園     4.2   台北市中山區  0.997316\n","621     康樂公園     4.1   台北市中山區  0.469018\n","20   台北玻璃金字塔     3.9   台北市中山區  0.229683\n","13      遼寧公園     3.8   台北市中山區  -0.09755\n"]},{"output_type":"error","ename":"KeyboardInterrupt","evalue":"Interrupted by user","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-32-58fc2814d288>\u001b[0m in \u001b[0;36m<cell line: 3>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     31\u001b[0m     \u001b[0mcount\u001b[0m \u001b[0;34m+=\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     32\u001b[0m     \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtouristspots\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'name'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'rating'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m'district'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m'weight'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 33\u001b[0;31m     \u001b[0mcustomer_input2\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0minput\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Please enter your preference spot  (e.g., 木柵河濱公園): \"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     34\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/ipykernel/kernelbase.py\u001b[0m in \u001b[0;36mraw_input\u001b[0;34m(self, prompt)\u001b[0m\n\u001b[1;32m    849\u001b[0m                 \u001b[0;34m\"raw_input was called, but this frontend does not support input requests.\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    850\u001b[0m             )\n\u001b[0;32m--> 851\u001b[0;31m         return self._input_request(str(prompt),\n\u001b[0m\u001b[1;32m    852\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_parent_ident\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    853\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_parent_header\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/ipykernel/kernelbase.py\u001b[0m in \u001b[0;36m_input_request\u001b[0;34m(self, prompt, ident, parent, password)\u001b[0m\n\u001b[1;32m    893\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mKeyboardInterrupt\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    894\u001b[0m                 \u001b[0;31m# re-raise KeyboardInterrupt, to truncate traceback\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 895\u001b[0;31m                 \u001b[0;32mraise\u001b[0m \u001b[0mKeyboardInterrupt\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Interrupted by user\"\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    896\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    897\u001b[0m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlog\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwarning\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Invalid Message:\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mexc_info\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyboardInterrupt\u001b[0m: Interrupted by user"]}]},{"cell_type":"code","source":["import numpy as np\n","from scipy.stats import norm\n","\n","def random_output2(data,result,customer_input ,customer_input2=None):\n","    touristspots = []\n","    district, day, time_category = customer_input.split()\n","\n","    data = result\n","    day_mapping = {'星期一': '星期一', '星期二': '星期二', '星期三': '星期三', '星期四': '星期四', '星期五': '星期五', '星期六': '星期六', '星期日': '星期日'}\n","    column_name = day_mapping.get(day, None)\n","\n","    if customer_input2:\n","        selected_spot = data[data['name'] == customer_input2].iloc[0]\n","        if selected_spot['name'] == customer_input2:\n","            w_rating = w_rating* 1.1\n","            w_ratings_total= w_ratings_total * 1.1\n","            w_district = w_district *1.1\n","        else:\n","            w_rating = w_rating* 0.9\n","            w_ratings_total= w_ratings_total * 0.9\n","            w_district = w_district * 0.9\n","    if column_name is None:\n","        return \"Invalid weekday input.\"\n","    data_temp = data[(data[column_name].str.contains(time_category, case=False))]\n","\n","    if data_temp.empty:\n","        return \"No matching tourist spot found.\"\n","\n","    data_temp['weight'] = w_rating*data_temp['rating_norm'] + w_ratings_total*data_temp['user_ratings_total_norm'] + w_district*data_temp['district_norm'] + np.random.uniform(0, 1, len(data_temp))\n","    touristspots = data_temp.nlargest(10, 'weight')\n","\n","    return touristspots"],"metadata":{"id":"IKHXf934apPu"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["v1 僅一次選擇\n","weighted 僅 rating_norm 和 user_ratings_total_norm"],"metadata":{"id":"OIA6aBt8a6Vb"}},{"cell_type":"code","source":["import numpy as np\n","from scipy.stats import norm\n","\n","def random_output(data, customer_input):\n","    touristspots = []\n","    district, day, time_category = customer_input.split()\n","\n","    data['rating_norm'] = (data['rating'] - data['rating'].mean()) / data['rating'].std()\n","    data['user_ratings_total_norm'] = (data['user_ratings_total'] - data['user_ratings_total'].mean()) / data['user_ratings_total'].std()\n","    data['district_norm'] = np.where(data['district'] == district, 1, 0.5)\n","    day_mapping = {'星期一': '星期一', '星期二': '星期二', '星期三': '星期三', '星期四': '星期四', '星期五': '星期五', '星期六': '星期六', '星期日': '星期日'}\n","    column_name = day_mapping.get(day, None)\n","\n","    if column_name is None:\n","        return \"Invalid weekday input.\"\n","    data_temp = data[(data['district'] == district) & (data[column_name].str.contains(time_category, case=False))]\n","\n","    if data_temp.empty:\n","        return \"No matching tourist spot found.\"\n","\n","    data_temp['weight'] = data_temp['rating_norm'] + data_temp['user_ratings_total_norm'] + data_temp['district_norm'] + np.random.uniform(0, 1, len(data_temp))\n","    touristspots = data_temp.nlargest(10, 'weight')\n","\n","    return touristspots"],"metadata":{"id":"IXoE7PJlWDYw"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["m=3\n","\n","customer_input = input(\"Please enter your preference of district, weekday, and time (e.g., 台北市中山區 星期一 全天): \")\n","data = df_tour[['name', 'rating', '星期一', '星期二', '星期三', '星期四', '星期五', '星期六', '星期日', 'district', 'user_ratings_total','location(lat,lng)']]\n","while True:\n","  touristspots = []\n","  district, day, time_category = customer_input.split()\n","  customer_input_temp = []\n","  data['rating_norm'] = (data['rating'] - data['rating'].mean()) / data['rating'].std()\n","  data['user_ratings_total_norm'] = (data['user_ratings_total'] - data['user_ratings_total'].mean()) / data['user_ratings_total'].std()\n","  data['district_norm'] = np.where(data['district'] == district, 1, 0.5)\n","  day_mapping = {'星期一': '星期一', '星期二': '星期二', '星期三': '星期三', '星期四': '星期四', '星期五': '星期五', '星期六': '星期六', '星期日': '星期日'}\n","  column_name = day_mapping.get(day, None)\n","  data_temp = data[(data['district'] == district) & (data[column_name].str.contains(time_category, case=False))]\n","\n","  if column_name is None:\n","      print(\"Invalid weekday input.\")\n","      break\n","  for i in range(m):\n","\n","    for name in customer_input_temp:\n","      data_temp = data_temp.drop(data_temp[data_temp['name'] == name].index)\n","    if data_temp.empty:\n","        print(\"No matching tourist spot found.\")\n","        break\n","    if count == 0:\n","      data_temp['weight'] = w_rating*data_temp['rating_norm'] + w_ratings_total*data_temp['user_ratings_total_norm'] + w_district*data_temp['district_norm'] + np.random.uniform(0, 1, len(data_temp))\n","      touristspots = data_temp.nlargest(10, 'weight')\n","      count += 1\n","      print(touristspots[['name', 'rating','district','weight']])\n","      customer_input2 = input(\"Please enter your preference spot  (e.g., 木柵河濱公園): \")\n","      customer_input_temp.append(customer_input2)\n","\n","    if count != 0 & count != m-1:\n","      w_rating, w_ratings_total, w_district = weight_calc(data,customer_input2,w_rating, w_ratings_total, w_district)\n","      data_temp['weight'] = w_rating*data_temp['rating_norm'] + w_ratings_total*data_temp['user_ratings_total_norm'] + w_district*data_temp['district_norm'] + np.random.uniform(0, 1, len(data_temp))\n","      touristspots = data_temp.nlargest(10, 'weight')\n","      count += 1\n","      print(touristspots[['name', 'rating','district','weight']])\n","      customer_input2 = input(\"Please enter your preference spot  (e.g., 木柵河濱公園): \")\n","      customer_input_temp.append(customer_input2)\n","\n","  else:\n","    break\n","print(customer_input_temp)\n","\n"],"metadata":{"id":"2W9yxwcIXdGT"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["\n","def weight_calc(data,customer_input2,w_rating, w_ratings_total, w_district):\n","  selected_spot = data[data['name'] == customer_input2].iloc[0]\n","  if selected_spot['name'] == customer_input2:\n","      w_rating = w_rating* 1.1\n","      w_ratings_total= w_ratings_total * 1.1\n","      w_district = w_district *1.1\n","  else:\n","      w_rating = w_rating* 0.9\n","      w_ratings_total= w_ratings_total * 0.9\n","      w_district = w_district * 0.9\n","  return w_rating, w_ratings_total, w_district\n","\n","\n","\n","\n","def weight_calc2(data_ori, data, customer_input2, w_rating, w_ratings_total, w_distance):\n","    selected_spot = data_ori[data_ori['name'] == customer_input2].iloc[0]\n","    if selected_spot['rating_norm'] >= data['rating_norm'].mean():\n","        w_rating = w_rating * 1.1\n","    else:\n","        w_rating = w_rating * 0.9\n","\n","    if selected_spot['user_ratings_total_norm'] >= data['user_ratings_total_norm'].mean():\n","        w_ratings_total = w_ratings_total * 1.1\n","    else:\n","        w_ratings_total = w_ratings_total * 0.9\n","\n","    if selected_spot['distance_norm'] >= data['distance_norm'].mean():\n","        w_distance = w_distance * 1.1\n","    else:\n","        w_distance = w_distance * 0.9\n","\n","    return w_rating, w_ratings_total, w_distance\n"],"metadata":{"id":"_uRyDf6OA82_"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import numpy as np\n","from scipy.stats import norm\n","\n","def random_output(data, customer_input):\n","    touristspots = []\n","    district, day, time_category = customer_input.split()\n","\n","\n","    data['rating_norm'] = (data['rating'] - data['rating'].mean()) / data['rating'].std()\n","    data['user_ratings_total_norm'] = (data['user_ratings_total'] - data['user_ratings_total'].mean()) / data['user_ratings_total'].std()\n","    data['district_norm'] = np.where(data['district'] == district, 1, 0.5)\n","    day_mapping = {'星期一': '星期一', '星期二': '星期二', '星期三': '星期三', '星期四': '星期四', '星期五': '星期五', '星期六': '星期六', '星期日': '星期日'}\n","    column_name = day_mapping.get(day, None)\n","\n","    if column_name is None:\n","        return \"Invalid weekday input.\"\n","    data_temp = data[(data['district'] == district) & (data[column_name].str.contains(time_category, case=False))]\n","\n","    if data_temp.empty:\n","        return \"No matching tourist spot found.\"\n","\n","    data_temp['weight'] = w_rating*data_temp['rating_norm'] + w_ratings_total*data_temp['user_ratings_total_norm'] + w_district*data_temp['district_norm'] + np.random.uniform(0, 1, len(data_temp))\n","    touristspots = data_temp.nlargest(10, 'weight')\n","\n","    return touristspots"],"metadata":{"id":"ivZQRj9lcFDG"},"execution_count":null,"outputs":[]}]}