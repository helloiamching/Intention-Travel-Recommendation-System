{"cells":[{"cell_type":"code","source":["import dask.dataframe as dd\n","import pandas as pd\n","import rpy2.robjects as robjects\n","from rpy2.robjects.packages import importr\n","import numpy as np"],"metadata":{"id":"gvLFr6FhFxSd","executionInfo":{"status":"ok","timestamp":1712824521502,"user_tz":-480,"elapsed":2468,"user":{"displayName":"王晴","userId":"13545761289751374787"}}},"execution_count":1,"outputs":[]},{"cell_type":"code","source":["level1_country =['阿爾及利亞','西餐','安哥拉','貝南','波札那','英屬印度洋領地','布吉納法索','蒲隆地','喀麥隆','維德角','中非','查德','葛摩','民主剛果','剛果','象牙海岸','吉布地','埃及','赤道幾內亞','厄利垂亞','衣索比亞','加彭','甘比亞','加納','幾內亞','幾內亞比索','肯亞','賴索托','賴比瑞亞','利比亞','馬達加斯加','馬拉威','馬利','茅利塔尼亞','模里西斯','馬約特','摩洛哥','莫三比克','納米比亞','尼日','奈及利亞','留尼旺','盧安達','聖赫勒拿','聖多美普林西比','塞內加爾','塞席爾','獅子山','索馬利亞','南非','南蘇丹','蘇丹','史瓦帝尼','坦尚尼亞','多哥','突尼西亞','烏干達','尚比亞','辛巴威','索馬利蘭','撒拉威阿拉伯民主共和國','阿富汗','亞美尼亞','亞塞拜然','巴林','孟加拉國','中華人民共和國','不丹','汶萊','柬埔寨','聖誕島','科科斯（基林）群島','賽普勒斯','喬治亞','印度','印尼','伊朗','伊拉克','以色列','日本','約旦','哈薩克','朝鮮','韓國','科威特','吉爾吉斯','寮國','黎巴嫩','馬來西亞','馬爾地夫','蒙古','緬甸','尼泊爾','阿曼','巴基斯坦','菲律賓','卡達','俄羅斯','沙烏地阿拉伯','新加坡','斯里蘭卡','敘利亞','塔吉克','泰國','東帝汶','土耳其','土庫曼','阿拉伯聯合大公國','亞克羅提利與德凱利亞','烏茲別克','越南','葉門','阿布哈茲','北賽普勒斯','巴勒斯坦','中華民國','南奧塞提亞','奧蘭群島','阿爾巴尼亞','安道爾','奧地利','白俄羅斯','比利時','波士尼亞與赫塞哥維納','保加利亞','克羅埃西亞','捷克','丹麥','愛沙尼亞','法羅群島','芬蘭','法國','德國','直布羅陀','希臘','根西島','匈牙利','冰島','愛爾蘭','曼島','義大利','澤西島','拉脫維亞','列支敦斯登','立陶宛','盧森堡','北馬其頓','馬爾他','摩爾多瓦','摩納哥','蒙特內哥羅','荷蘭','挪威','波蘭','葡萄牙','羅馬尼亞','俄羅斯','聖馬利諾','塞爾維亞','斯洛伐克','斯洛維尼亞','西班牙','斯瓦巴','瑞典','瑞士','烏克蘭','英國','梵蒂岡','科索沃','聶斯特河沿','安吉拉','安地卡及巴布達','阿魯巴','巴哈馬','巴貝多','貝里斯','百慕達','英屬維京群島','加拿大','開曼群島','克利珀頓島','哥斯大黎加','古巴','古拉索','多米尼克','多明尼加','薩爾瓦多','格陵蘭','格瑞那達','瓜德羅普','瓜地馬拉','海地','宏都拉斯','牙買加','馬提尼克島','墨西哥','蒙哲臘','納瓦薩島','尼加拉瓜','巴拿馬','波多黎各','聖巴泰勒米','聖克里斯多福及尼維斯','聖露西亞','法屬聖馬丁','聖皮耶與密克隆群島','聖文森及格瑞那丁','千里達及托巴哥','土克凱可群島','美國','美屬維京群島','荷屬聖馬丁','波內赫','聖佑達修斯','荷屬沙巴','阿根廷','玻利維亞','巴西','智利','哥倫比亞','厄瓜多','福克蘭群島','法屬圭亞那','蓋亞那','巴拉圭','秘魯','蘇利南','烏拉圭','委內瑞拉','美屬薩摩亞','澳大利亞','貝克群島','庫克群島','斐濟','法屬玻里尼西亞','關島','豪蘭島','加維斯島','強斯頓島','金曼礁','吉里巴斯','馬紹爾群島','密克羅尼西亞','中途島','諾魯','新喀里多尼亞','紐西蘭','紐埃','諾福克島','北馬利安納群島','帛琉','帕邁拉環礁','巴布亞紐幾內亞','皮特肯群島','薩摩亞','索羅門群島','托克勞','東加','吐瓦魯','萬那杜','威克島','瓦利斯和富圖納島','布韋島','法屬南部領地','赫德島和麥克唐納群島','南喬治亞島和南桑威奇群島','台灣','台式','中式','粵式','閔式','客家','原住民','上海','北京','港式','泰式','越式','印尼','大馬','美式','美陸','英式','歐陸','日式','韓式','大韓','法式','中東']\n","level2_foodname =['濃湯','起司','豆苗','蛋塔','鱸魚','白斬雞','豆花','鐵板燒','牛雜','鳳爪','水餃','燒雞','豆皮','蛋糕','奶油','千層','菜瓜','田螺','Taco','明太子','烏龍茶','麥茶','紅茶','綠茶','抹茶','蟹肉','甜不辣','豬肋排','酒精','牛舌','炸物','蛤蜊','魷魚','烏賊','餃子','鱈魚','丸子','螃蟹','壽司','天婦羅','羊排','章魚','干貝','冬粉','炒飯','酸菜','生魚片','饅頭','香腸','杏仁','猴頭菇','茄子','高麗菜','洋蔥','金莎','餛飩','海瓜子','pizza','鮭魚','松阪豬','烤串','青醬','刺蔥','蘑菇','烏龍麵','白飯','火雞肉飯','牛肉麵','滷肉飯','炕肉飯','鴨肉飯','蝦仁飯','蛋炒飯','竹筒飯','排骨飯','新丁粄','台式飯糰','虱目魚','虱目魚肚','浮水虱目魚羹','虱目魚肚粥','鐵蛋','牛肉湯','魚丸湯','四神湯','下水湯','菜尾湯','黑白切','蚵仔煎','蚵仔酥','鹹粥','肉羹','蝦仁羹','花枝羹','羊肉羹','豆簽羹','大麵羹','西魯肉','肉粽','野薑花粽','油飯','筒仔米糕','油蔥粿','豆菜麵','關廟麵','擔仔麵','蚌麵','摵仔麵','鱔魚意麵','鍋燒意麵','玉里麵','粄條','赤牛麵','貓鼠麵','傻瓜乾麵','蚵仔麵線','炒米粉','米粉湯','米苔目','米香','涼圓','肉圓','碗粿','摩訶粿','麵粉粿','貢丸','豬血糕','萬巒豬腳','鹹酥雞','潤餅','蝦餅','炭烤三明治','小米麻糬','番薯圓','台灣燒仙草','芋饅頭','珍珠','奶茶','木瓜牛乳','青蛙下蛋','芒果冰','臭豆腐','深坑豆腐','豆乳雞','鹽水雞','麻油雞','薑母鴨','藥燉排骨','藥燉土虱','當歸鴨','東山鴨頭','蔥油餅','滷味','臭臭鍋','鯊魚煙','烤香腸','大餅包小餅','大腸包小腸','刈包','咖啡香腸','膽肝','麻辣鴨血','香雞排','沙拉船','魚酥','甘梅薯條','燒酒螺','大雕燒','烤鳥蛋','炸𩵚魠魚','炸棗','大溪豆乾','馬祖魚丸','糯米腸','雞捲','狀元糕','貓掌燒','糕渣','烤魷魚','里港扁食','水煎包','湯圓','月餅','綠豆椪','蛋黃酥','太陽餅','卷煎','鹹餅','蔥抓餅','蔥餅','蛋餅','牛舌餅','共匪餅','肚臍餅','胡a椒餅','螺仔餅','黑貓包','鼎邊趖','龍鳳腿','蚵嗲','炸粿','棺材板','奮起湖便當','臺鐵便當','池上飯包','福隆便當','焢窯','薑汁番茄','麻芛','仙人掌冰','雞蛋冰','花生卷加冰淇淋','包心粉圓','豆漿豆花','愛玉','豐仁冰','八寶冬粉','薑汁番茄','淡水阿給','三杯','油蔥酥','菜脯卵','西衛麵線','新竹米粉','芋圓','黑輪','蜈蚣蟳','通心鰻','蜂巢鮮蚵','蔭豉鮮蚵','五柳枝魚','紅蟳米糕','櫻花蝦米糕','藥燉土虱','虱目魚湯','虱目魚','魷魚螺肉蒜','乾煎白鯧','清蒸石斑','魷魚羹','鯊魚煙','曼波魚皮','三杯魚腸','蛋黃大蝦','甘蔗蝦','烤烏魚子','糖醋魚','鳳梨蝦球','三杯田雞','紅燒魚','豆瓣魚','豆酥魚','客家小炒','布袋雞','燒酒雞','甕仔雞','狗尾雞','三杯雞','薑母鴨','鳳梨苦瓜雞','剝皮辣椒雞','雞仔豬肚鱉','涼拌鴨賞','烏骨雞湯','甘蔗雞','雙緣佛手','滷豬腳','花生豬腳','萬巒豬腳','豬腳麵線','藥燉排骨','大封肉','醃腸熟肉','薑絲大腸','客家小炒','紅糟肉','糖醋排骨','紅燒排骨','西魯肉','五色冷盤','咕咾肉','蔥爆牛肉','豆乾牛肉','炒羊肉','五更腸旺','宮保皮蛋','菜脯蛋','九層塔烘蛋','三色蛋','鹹蛋苦瓜','蟹黃豆腐','麻婆豆腐','蔥燒豆腐','海鮮豆腐羹','鐵板豆腐','老皮嫩肉','火鍋','羊肉爐','海鮮鍋','麻辣火鍋','鴛鴦鍋','石頭火鍋','素食鍋','佛跳牆','握壽司','味噌湯','刺身','清酒','便當','納豆','天婦羅','章魚燒','竹輪','蕎麥麵','牛丼','拉麵','烏龍麵','懷石料理','飯','蛋包飯','薑燒豬肉','馬鈴薯燉肉','漢堡排','日式炸雞塊','餃子','豬肉湯','炊飯','魚板串','紫菜飯捲','冷麵','烤五花肉','醬蟹','春川炒雞','血腸','泡菜','韓式拌飯','辣炒年糕','韓式烤肉','炸醬麵','五花肉','炸雞','漢堡','比薩','牛排','墨西哥捲餅','烤豬肋排','BBQ','印度烤餅','捲餅','咖哩','奶茶','冰淇淋','抓飯','鬆餅','煎餅','烤餅','球餅','燒餅','豌豆','辣雞豆','明蝦','茄汁咖哩雞','拉西','優格','炸蔬菜','牛肉','雞肉','羊肉','魚肉','海鮮','豬肉','菠菜','香菜','芹菜','蕹菜','茼蒿','茴香','莧菜','萵苣','油麥菜','白菜類','小白菜','塌棵菜','菜心','大白菜','油菜','薺菜','芥菜類','子芥菜','蕪菁','榨菜','雪裡蕻','油菜','甘藍類','苤藍','青花菜','花椰菜','寶塔花菜','捲心菜','抱子甘藍','紫甘藍','羽衣甘藍','木立花椰菜','白花芥藍','芥藍','水生類','西洋菜','水芹','大蔥','小蔥','火蔥','樓子蔥','大蒜','洋蔥','韭菜','韭蔥','薤','莖菜類','大黃','蘆筍','甘蔗','筊白筍','瓜果類','黃瓜','絲瓜','冬瓜','苦瓜','南瓜','西葫蘆','葫蘆','筍瓜','佛手瓜','茄子','番茄','辣椒','菜椒','根莖類','番薯','馬鈴薯','山藥','芋頭','魔芋','薑','白蘿蔔','胡蘿蔔','辣根','甜菜根','芹菜根','木薯','樹薯','雪蓮薯','豆類','紅豆','豌豆','刀豆','蠶豆','大豆','豆角','豇豆','扁豆','四季豆','荷包豆','毛豆','蓮藕','茭白','菱角','蓴菜','慈菇','水芹','芡實','蒲菜','龍骨瓣','莕菜','獵人燴雞','義大利薄餅','義大利麵','義大利餃','意式冰淇淋','提拉米蘇','卡布奇諾','濃縮咖啡','拿鐵咖啡','特色食品','松露菌','巴馬臣起司','莫薩里拉起司','馬斯卡彭起司','卡蘇馬蘇乳酪','巴馬火腿','莎樂美腸','意式肉腸','風乾豬面頰肉','香蒜醬','熱那亞醬','蕃茄肉醬','辣蝦湯','青木瓜','雞湯','紅咖哩','泰式炒飯','打拋豬肉','綠咖哩','打拋豬','月亮蝦餅','河粉','蝦醬','蝦球','沙拉','春捲','米線','腸粉','香茅','魚露','法國蝸牛','青蛙腿','肥肝','松露','魚子醬','紅酒燉牛肉','孛艮地燉牛肉','火上鍋','燉菜鍋','蔬菜燉牛肉','白醬燉牛肉','燉牛肉佐白醬','老奶奶牛肉','韃靼生牛塔','野蠻人牛肉','諾曼地牛肚鍋','長棍麵包','可頌麵包','布莉歐','巧克力','火腿起司三明治','可麗餅','鹹派','蘋果派','薯條','生蠔','龍蝦','普羅旺斯燉菜','馬鈴薯泥','歐姆蛋','起司火鍋','紅酒','葡萄酒凍','馬賽魚湯','焗烤洋蔥湯','蘑菇濃湯','馬卡龍','檸檬塔','翻轉蘋果塔','閃電泡芙','修女泡芙','慕絲','巧克力','熔岩巧克力','焦糖布','奶油烤布蕾','奶油酥','法式千層酥','法式棉花糖','舒芙蕾','可麗露','手指餅乾','費南雪','蒙布朗','栗子蛋糕','瑪德蓮','紅酒','白酒','啤酒','調酒','水果酒','紹興','利口酒','氣泡酒','中藥','白蘭地','葡萄柚','蘋果','梨子','金柑','鳳梨','草莓','桶柑','蓮霧','椪柑','柚子','釋迦','龍眼','香蕉','木瓜','柑橘','櫻桃','芒果','楊桃','柳丁','葡萄','葡萄','香瓜','荔枝','鳳梨','柚子','火龍果','西瓜','榴槤','芒果','草莓','楊桃','木瓜','龍眼','甜柿','蓮霧','釋迦','香蕉','柿子','荔枝','番石榴','葡萄','柚子','鳳梨','草莓']\n","level3_taste =['柔軟','綿滑','西西里','酥脆','醋溜','香甜','可口','脆滑','晶瑩','鬆軟','肥美','香甜','潤滑','鮮黃','滋潤','優質','鮮甜','美味','白淨','柔暖','軟糯','糯香','青醬','白醬','麻辣','粉紅醬','紅醬','巴斯克','莎莎','莎朗','淡甜','紅燒','清燉','誘人','精緻','細膩','香滑','香料','','酸','甜','苦','辣','鹹','蔥','薑','蒜','洋蔥','山柰','芹菜','香芹','辣椒','花椒','胡椒','黑胡椒','白胡椒','紅胡椒','丁香','肉桂','中國肉桂','百里香','迷迭香','大茴香子','小茴香子','蒔蘿','八角','孜然','葛縷子','薑黃','芥末','山葵','辣根','藏紅花','香草','月桂','梔子','羅勒','龍蒿','牛至','香茅','風輪菜','鼠尾草','牛膝草','薰衣草','松露','黑松露','白松露','香辣椒','胭脂樹籽','月桂葉','黑種草','酸瓜鈕','芹菜籽','芫荽','咖哩葉','葫蘆巴','天堂椒','杜松子','芥菜籽','肉豆蔻','甜椒','石榴籽','罌粟籽','鹽','精製鹽','芝麻','酸模','酸子','羅勒','佛手柑','香菜','西洋菜','蒲公英','蒔蘿','香茅','薄荷','芥子','香芹','迷迭香','藥用鼠尾草','香辣蓼','七葉蘭','番紅花','碌柚葉','九層塔','芫茜','斑蘭葉']"],"metadata":{"id":"pny15zybFjcl","executionInfo":{"status":"ok","timestamp":1712824522264,"user_tz":-480,"elapsed":765,"user":{"displayName":"王晴","userId":"13545761289751374787"}}},"execution_count":2,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"KkN2jQTJfSkA"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["print(len(level1_country))\n","print(len(level2_foodname))\n","print(len(level3_taste))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"eliY3thMFlDx","executionInfo":{"status":"ok","timestamp":1712133177181,"user_tz":-480,"elapsed":4,"user":{"displayName":"王晴","userId":"13545761289751374787"}},"outputId":"65e6ba2e-864e-40e1-ed3a-80d625cc7e88"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["288\n","557\n","113\n"]}]},{"cell_type":"code","source":["dtype = {'user_ratings_total': float, 'editorial_summary': str, 'keywords': str, 'keywords_processed': str}\n","df = dd.read_csv('/content/restaurant_data_output_merge_ewe.csv', dtype=dtype)\n","df['user_ratings_total'] = df['user_ratings_total'].fillna(0).astype('int64')\n","df['user_ratings_total'] = df['user_ratings_total'].astype('Int64')\n"],"metadata":{"id":"woHCeqs7OH_g","executionInfo":{"status":"error","timestamp":1712824522265,"user_tz":-480,"elapsed":7,"user":{"displayName":"王晴","userId":"13545761289751374787"}},"colab":{"base_uri":"https://localhost:8080/","height":473},"outputId":"1d9ed383-35a2-45ee-f657-ff4ed7aef20e"},"execution_count":3,"outputs":[{"output_type":"error","ename":"FileNotFoundError","evalue":"An error occurred while calling the read_csv method registered to the pandas backend.\nOriginal Message: [Errno 2] No such file or directory: '/gdrive/Shareddrives/從資料學習2/Dataset & code/clean/restaurant_data_output_merge_ewe.csv'","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mFileNotFoundError\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/dask/backends.py\u001b[0m in \u001b[0;36mwrapper\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    135\u001b[0m                 \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 136\u001b[0;31m                     \u001b[0;32mreturn\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    137\u001b[0m                 \u001b[0;32mexcept\u001b[0m \u001b[0mException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/dask/dataframe/io/csv.py\u001b[0m in \u001b[0;36mread\u001b[0;34m(urlpath, blocksize, lineterminator, compression, sample, sample_rows, enforce, assume_missing, storage_options, include_path_column, **kwargs)\u001b[0m\n\u001b[1;32m    760\u001b[0m     ):\n\u001b[0;32m--> 761\u001b[0;31m         return read_pandas(\n\u001b[0m\u001b[1;32m    762\u001b[0m             \u001b[0mreader\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/dask/dataframe/io/csv.py\u001b[0m in \u001b[0;36mread_pandas\u001b[0;34m(reader, urlpath, blocksize, lineterminator, compression, sample, sample_rows, enforce, assume_missing, storage_options, include_path_column, **kwargs)\u001b[0m\n\u001b[1;32m    560\u001b[0m     \u001b[0mb_lineterminator\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlineterminator\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mencode\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 561\u001b[0;31m     b_out = read_bytes(\n\u001b[0m\u001b[1;32m    562\u001b[0m         \u001b[0murlpath\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/dask/bytes/core.py\u001b[0m in \u001b[0;36mread_bytes\u001b[0;34m(urlpath, delimiter, not_zero, blocksize, sample, compression, include_path, **kwargs)\u001b[0m\n\u001b[1;32m    110\u001b[0m                 )\n\u001b[0;32m--> 111\u001b[0;31m             \u001b[0msize\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mfs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0minfo\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpath\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"size\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    112\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0msize\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/fsspec/implementations/local.py\u001b[0m in \u001b[0;36minfo\u001b[0;34m(self, path, **kwargs)\u001b[0m\n\u001b[1;32m     86\u001b[0m             \u001b[0mpath\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_strip_protocol\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpath\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 87\u001b[0;31m             \u001b[0mout\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mos\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstat\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpath\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfollow_symlinks\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     88\u001b[0m             \u001b[0mlink\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mstat\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mS_ISLNK\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mout\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mst_mode\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mFileNotFoundError\u001b[0m: [Errno 2] No such file or directory: '/gdrive/Shareddrives/從資料學習2/Dataset & code/clean/restaurant_data_output_merge_ewe.csv'","\nThe above exception was the direct cause of the following exception:\n","\u001b[0;31mFileNotFoundError\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-3-fa57fbb1aa33>\u001b[0m in \u001b[0;36m<cell line: 2>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0mdtype\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m{\u001b[0m\u001b[0;34m'user_ratings_total'\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mfloat\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'editorial_summary'\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mstr\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'keywords'\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mstr\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'keywords_processed'\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mstr\u001b[0m\u001b[0;34m}\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mdf\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mread_csv\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'/gdrive/Shareddrives/從資料學習2/Dataset & code/clean/restaurant_data_output_merge_ewe.csv'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      3\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0mdf_tour\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mread_csv\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'/gdrive/Shareddrives/從資料學習2/Dataset & code/clean/tour_data_output_merge_ewe.csv'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0mdf_tour\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'user_ratings_total'\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdf_tour\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'user_ratings_total'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfillna\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mastype\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'int64'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/dask/backends.py\u001b[0m in \u001b[0;36mwrapper\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    136\u001b[0m                     \u001b[0;32mreturn\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    137\u001b[0m                 \u001b[0;32mexcept\u001b[0m \u001b[0mException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 138\u001b[0;31m                     raise type(e)(\n\u001b[0m\u001b[1;32m    139\u001b[0m                         \u001b[0;34mf\"An error occurred while calling the {funcname(func)} \"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    140\u001b[0m                         \u001b[0;34mf\"method registered to the {self.backend} backend.\\n\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mFileNotFoundError\u001b[0m: An error occurred while calling the read_csv method registered to the pandas backend.\nOriginal Message: [Errno 2] No such file or directory: '/gdrive/Shareddrives/從資料學習2/Dataset & code/clean/restaurant_data_output_merge_ewe.csv'"]}]},{"cell_type":"code","source":["def contains_empty_list(lst):\n","    return lst == []\n","df = df[df['keywords'].apply(lambda x: x != '[]')]"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":180},"id":"miyWrtUPLzQV","executionInfo":{"status":"error","timestamp":1712824580081,"user_tz":-480,"elapsed":327,"user":{"displayName":"王晴","userId":"13545761289751374787"}},"outputId":"25e008e4-8556-4c7b-b6e4-0bb20f606097"},"execution_count":4,"outputs":[{"output_type":"error","ename":"NameError","evalue":"name 'df' is not defined","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-4-1c6600f1c292>\u001b[0m in \u001b[0;36m<cell line: 3>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0mcontains_empty_list\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlst\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      2\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0mlst\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 3\u001b[0;31m \u001b[0mdf\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdf\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mdf\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'keywords'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mapply\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;32mlambda\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mx\u001b[0m \u001b[0;34m!=\u001b[0m \u001b[0;34m'[]'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;31mNameError\u001b[0m: name 'df' is not defined"]}]},{"cell_type":"code","source":["def process_keywords(keywords_str):\n","    if isinstance(keywords_str, str):\n","        # Remove '[' and ']' characters from the string\n","        keywords_str = keywords_str.replace('[', '').replace(']', '')\n","        keywords_list = keywords_str.split(',')\n","        # Strip leading and trailing spaces from each keyword\n","        keywords_list = [keyword.strip() for keyword in keywords_list]\n","        # Enclose each keyword in single quotes and join them with commas\n","        return ', '.join([f\"'{keyword}'\" for keyword in keywords_list])\n","    else:\n","        return ''\n","\n","# Apply the process_keywords function to the 'keywords' column\n","df['keywords_processed'] = df['keywords'].apply(process_keywords, meta=('object'))\n","\n","# Display the first few rows of the DataFrame with the processed keywords\n","df.head()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":898},"id":"po-Xdn9gQ_-6","executionInfo":{"status":"ok","timestamp":1712340160142,"user_tz":-480,"elapsed":1044,"user":{"displayName":"王晴","userId":"13545761289751374787"}},"outputId":"f95b27f3-e569-4e7b-835e-d5e9553dca0b"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/dask/dataframe/core.py:7084: FutureWarning: Meta is not valid, `map_partitions` and `map_overlap` expects output to be a pandas object. Try passing a pandas object as meta or a dict or tuple representing the (name, dtype) of the columns. In the future the meta you passed will not work.\n","  warnings.warn(\n"]},{"output_type":"execute_result","data":{"text/plain":["                      place_id  \\\n","0  ChIJaU_-FyqrQjQRbLmzDXFaj5E   \n","1  ChIJJXnO0barQjQR0ZJz1JGJ8v4   \n","2  ChIJA35dJHyrQjQRJ-sD3kSwWUY   \n","3  ChIJ21GPVhKsQjQRO3C5Xb-roFY   \n","4  ChIJy0NrQeSrQjQRVlv2fBcHVEA   \n","\n","                                                name business_status  \\\n","0                                          馬友友印度清真餐廳     OPERATIONAL   \n","1                                      馬友友印度餐廳酒吧+水煙館     OPERATIONAL   \n","2  Mellow Bar & Restaurant-東區精釀啤酒|聚餐餐廳|必吃餐酒館|網美餐酒...     OPERATIONAL   \n","3                                       星期五美式餐廳（美麗華）     OPERATIONAL   \n","4                                          非常泰 - 復興店     OPERATIONAL   \n","\n","  wheelchair_accessible_entrance  \\\n","0                           True   \n","1                           True   \n","2                           <NA>   \n","3                           True   \n","4                          False   \n","\n","                                                type  rating  \\\n","0  ['restaurant', 'point_of_interest', 'food', 'e...     4.7   \n","1  ['bar', 'restaurant', 'food', 'point_of_intere...     4.7   \n","2  ['restaurant', 'point_of_interest', 'food', 'e...     4.9   \n","3  ['restaurant', 'food', 'point_of_interest', 'e...     4.1   \n","4  ['restaurant', 'food', 'point_of_interest', 'e...     4.4   \n","\n","                                   editorial_summary  user_ratings_total  \\\n","0  {'language': 'zh-TW', 'overview': '清真認證的休閒餐廳，提...              2091.0   \n","1  {'language': 'zh-TW', 'overview': '供應印度與中式餐點的新...              2125.0   \n","2                                               <NA>               518.0   \n","3  {'language': 'zh-TW', 'overview': '氣氛歡樂的連鎖休閒餐廳...              2401.0   \n","4                                               <NA>              1546.0   \n","\n","   price_level formatted_phone_number  ... delivery  \\\n","0          2.0           02 2711 2067  ...     True   \n","1          NaN           02 2500 6186  ...     True   \n","2          NaN           02 2771 9907  ...    False   \n","3          NaN           02 2175 3358  ...     True   \n","4          2.0           02 2546 6745  ...     True   \n","\n","                                location(lat,lng)  \\\n","0  {'lat': 25.04102259999999, 'lng': 121.5497197}   \n","1         {'lat': 25.0458202, 'lng': 121.5332625}   \n","2         {'lat': 25.0397848, 'lng': 121.5522774}   \n","3         {'lat': 25.0836081, 'lng': 121.5572275}   \n","4         {'lat': 25.0591667, 'lng': 121.5444444}   \n","\n","                                        reviews_text  serves_breakfast  \\\n","0  ['甜點非常不推薦 太甜了 不知道在吃什麼東西的甜點 烤餅跟腰果雞咖哩還不錯 但我不喜歡店員...             False   \n","1  ['咖喱口味多元，奶油、菠菜、香料咖喱\\n有羊肉、雞、海鮮、乳酪配料\\n\\n推薦🌟坦督碳烤優...              <NA>   \n","2  ['忠孝敦化站明曜百貨這個出口從216巷進來\\n很容易找到，餐點尚可，談不上美味佳餚，配酒菜...              <NA>   \n","3  ['人均一千塊就能吃到非常豐盛的餐廳\\n\\n豬肋排還是用田納西威士忌燒烤醬搭配最棒\\n這個醬...              <NA>   \n","4  ['\\\\瓦城旗下時尚又食尚的泰式餐廳！/\\n\\n👍🏼白飯吃到飽\\n👍🏼飲料超好喝\\n👍🏼用餐...             False   \n","\n","  serves_brunch serves_lunch serves_dinner serves_vegetarian_food  \\\n","0         False         True          True                   True   \n","1         False         True          True                   True   \n","2          <NA>         <NA>          True                   <NA>   \n","3          <NA>         True          True                   <NA>   \n","4         False         True          True                   <NA>   \n","\n","                                            keywords  \\\n","0  ['咖哩', '烤餅', '非常', '甜點', '推薦', '店員', '口味', '烤牛...   \n","1  ['香料', '咖喱', '雞肉', '烤餅', '風格', '咖哩', '肚皮舞', '味...   \n","2  ['餐點', '感覺', '好喝', '餐酒館', '不過', '美式', '有點', '調...   \n","3  ['起司', '沙拉', '這個', '濃湯', '牛排', '搭配', '蕃茄', '豬肋...   \n","4  ['用餐', '泰式', '超級', '蝦餅', '時間', '選擇', '餐點', '不過...   \n","\n","                                  keywords_processed  \n","0  ''咖哩'', ''烤餅'', ''非常'', ''甜點'', ''推薦'', ''店員''...  \n","1  ''香料'', ''咖喱'', ''雞肉'', ''烤餅'', ''風格'', ''咖哩''...  \n","2  ''餐點'', ''感覺'', ''好喝'', ''餐酒館'', ''不過'', ''美式'...  \n","3  ''起司'', ''沙拉'', ''這個'', ''濃湯'', ''牛排'', ''搭配''...  \n","4  ''用餐'', ''泰式'', ''超級'', ''蝦餅'', ''時間'', ''選擇''...  \n","\n","[5 rows x 23 columns]"],"text/html":["\n","  <div id=\"df-a815de79-f258-4a1e-87d1-3909c50a823c\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>place_id</th>\n","      <th>name</th>\n","      <th>business_status</th>\n","      <th>wheelchair_accessible_entrance</th>\n","      <th>type</th>\n","      <th>rating</th>\n","      <th>editorial_summary</th>\n","      <th>user_ratings_total</th>\n","      <th>price_level</th>\n","      <th>formatted_phone_number</th>\n","      <th>...</th>\n","      <th>delivery</th>\n","      <th>location(lat,lng)</th>\n","      <th>reviews_text</th>\n","      <th>serves_breakfast</th>\n","      <th>serves_brunch</th>\n","      <th>serves_lunch</th>\n","      <th>serves_dinner</th>\n","      <th>serves_vegetarian_food</th>\n","      <th>keywords</th>\n","      <th>keywords_processed</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>ChIJaU_-FyqrQjQRbLmzDXFaj5E</td>\n","      <td>馬友友印度清真餐廳</td>\n","      <td>OPERATIONAL</td>\n","      <td>True</td>\n","      <td>['restaurant', 'point_of_interest', 'food', 'e...</td>\n","      <td>4.7</td>\n","      <td>{'language': 'zh-TW', 'overview': '清真認證的休閒餐廳，提...</td>\n","      <td>2091.0</td>\n","      <td>2.0</td>\n","      <td>02 2711 2067</td>\n","      <td>...</td>\n","      <td>True</td>\n","      <td>{'lat': 25.04102259999999, 'lng': 121.5497197}</td>\n","      <td>['甜點非常不推薦 太甜了 不知道在吃什麼東西的甜點 烤餅跟腰果雞咖哩還不錯 但我不喜歡店員...</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>True</td>\n","      <td>True</td>\n","      <td>True</td>\n","      <td>['咖哩', '烤餅', '非常', '甜點', '推薦', '店員', '口味', '烤牛...</td>\n","      <td>''咖哩'', ''烤餅'', ''非常'', ''甜點'', ''推薦'', ''店員''...</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>ChIJJXnO0barQjQR0ZJz1JGJ8v4</td>\n","      <td>馬友友印度餐廳酒吧+水煙館</td>\n","      <td>OPERATIONAL</td>\n","      <td>True</td>\n","      <td>['bar', 'restaurant', 'food', 'point_of_intere...</td>\n","      <td>4.7</td>\n","      <td>{'language': 'zh-TW', 'overview': '供應印度與中式餐點的新...</td>\n","      <td>2125.0</td>\n","      <td>NaN</td>\n","      <td>02 2500 6186</td>\n","      <td>...</td>\n","      <td>True</td>\n","      <td>{'lat': 25.0458202, 'lng': 121.5332625}</td>\n","      <td>['咖喱口味多元，奶油、菠菜、香料咖喱\\n有羊肉、雞、海鮮、乳酪配料\\n\\n推薦🌟坦督碳烤優...</td>\n","      <td>&lt;NA&gt;</td>\n","      <td>False</td>\n","      <td>True</td>\n","      <td>True</td>\n","      <td>True</td>\n","      <td>['香料', '咖喱', '雞肉', '烤餅', '風格', '咖哩', '肚皮舞', '味...</td>\n","      <td>''香料'', ''咖喱'', ''雞肉'', ''烤餅'', ''風格'', ''咖哩''...</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>ChIJA35dJHyrQjQRJ-sD3kSwWUY</td>\n","      <td>Mellow Bar &amp; Restaurant-東區精釀啤酒|聚餐餐廳|必吃餐酒館|網美餐酒...</td>\n","      <td>OPERATIONAL</td>\n","      <td>&lt;NA&gt;</td>\n","      <td>['restaurant', 'point_of_interest', 'food', 'e...</td>\n","      <td>4.9</td>\n","      <td>&lt;NA&gt;</td>\n","      <td>518.0</td>\n","      <td>NaN</td>\n","      <td>02 2771 9907</td>\n","      <td>...</td>\n","      <td>False</td>\n","      <td>{'lat': 25.0397848, 'lng': 121.5522774}</td>\n","      <td>['忠孝敦化站明曜百貨這個出口從216巷進來\\n很容易找到，餐點尚可，談不上美味佳餚，配酒菜...</td>\n","      <td>&lt;NA&gt;</td>\n","      <td>&lt;NA&gt;</td>\n","      <td>&lt;NA&gt;</td>\n","      <td>True</td>\n","      <td>&lt;NA&gt;</td>\n","      <td>['餐點', '感覺', '好喝', '餐酒館', '不過', '美式', '有點', '調...</td>\n","      <td>''餐點'', ''感覺'', ''好喝'', ''餐酒館'', ''不過'', ''美式'...</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>ChIJ21GPVhKsQjQRO3C5Xb-roFY</td>\n","      <td>星期五美式餐廳（美麗華）</td>\n","      <td>OPERATIONAL</td>\n","      <td>True</td>\n","      <td>['restaurant', 'food', 'point_of_interest', 'e...</td>\n","      <td>4.1</td>\n","      <td>{'language': 'zh-TW', 'overview': '氣氛歡樂的連鎖休閒餐廳...</td>\n","      <td>2401.0</td>\n","      <td>NaN</td>\n","      <td>02 2175 3358</td>\n","      <td>...</td>\n","      <td>True</td>\n","      <td>{'lat': 25.0836081, 'lng': 121.5572275}</td>\n","      <td>['人均一千塊就能吃到非常豐盛的餐廳\\n\\n豬肋排還是用田納西威士忌燒烤醬搭配最棒\\n這個醬...</td>\n","      <td>&lt;NA&gt;</td>\n","      <td>&lt;NA&gt;</td>\n","      <td>True</td>\n","      <td>True</td>\n","      <td>&lt;NA&gt;</td>\n","      <td>['起司', '沙拉', '這個', '濃湯', '牛排', '搭配', '蕃茄', '豬肋...</td>\n","      <td>''起司'', ''沙拉'', ''這個'', ''濃湯'', ''牛排'', ''搭配''...</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>ChIJy0NrQeSrQjQRVlv2fBcHVEA</td>\n","      <td>非常泰 - 復興店</td>\n","      <td>OPERATIONAL</td>\n","      <td>False</td>\n","      <td>['restaurant', 'food', 'point_of_interest', 'e...</td>\n","      <td>4.4</td>\n","      <td>&lt;NA&gt;</td>\n","      <td>1546.0</td>\n","      <td>2.0</td>\n","      <td>02 2546 6745</td>\n","      <td>...</td>\n","      <td>True</td>\n","      <td>{'lat': 25.0591667, 'lng': 121.5444444}</td>\n","      <td>['\\\\瓦城旗下時尚又食尚的泰式餐廳！/\\n\\n👍🏼白飯吃到飽\\n👍🏼飲料超好喝\\n👍🏼用餐...</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>True</td>\n","      <td>True</td>\n","      <td>&lt;NA&gt;</td>\n","      <td>['用餐', '泰式', '超級', '蝦餅', '時間', '選擇', '餐點', '不過...</td>\n","      <td>''用餐'', ''泰式'', ''超級'', ''蝦餅'', ''時間'', ''選擇''...</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>5 rows × 23 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a815de79-f258-4a1e-87d1-3909c50a823c')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-a815de79-f258-4a1e-87d1-3909c50a823c button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-a815de79-f258-4a1e-87d1-3909c50a823c');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-12890cc1-c066-460d-b4b0-ef34ce4a37f3\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-12890cc1-c066-460d-b4b0-ef34ce4a37f3')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-12890cc1-c066-460d-b4b0-ef34ce4a37f3 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe"}},"metadata":{},"execution_count":109}]},{"cell_type":"code","source":["max_length = max(len(level1_country), len(level2_foodname), len(level3_taste))\n","df_dic = pd.DataFrame({\n","    \"id\":np.arange(1, max_length + 1),\n","    \"Country\":pd.Series(level1_country),\n","    \"Food Name\":pd.Series(level2_foodname),\n","    \"Taste\":pd.Series(level3_taste)\n","    })"],"metadata":{"id":"agjaXts4Fmyk"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["df_dic.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"lpj5UaOMZ5ww","executionInfo":{"status":"ok","timestamp":1712339801430,"user_tz":-480,"elapsed":518,"user":{"displayName":"王晴","userId":"13545761289751374787"}},"outputId":"ad9ddf77-5fb5-4757-97b3-02ca9164050d"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   id Country Food Name Taste\n","0   1   阿爾及利亞        濃湯    柔軟\n","1   2      西餐        起司    綿滑\n","2   3     安哥拉        豆苗   西西里\n","3   4      貝南        蛋塔    酥脆\n","4   5     波札那        鱸魚    醋溜"],"text/html":["\n","  <div id=\"df-3dcbe2a1-c585-4db2-bde7-a3d92d61d4b8\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>id</th>\n","      <th>Country</th>\n","      <th>Food Name</th>\n","      <th>Taste</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1</td>\n","      <td>阿爾及利亞</td>\n","      <td>濃湯</td>\n","      <td>柔軟</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2</td>\n","      <td>西餐</td>\n","      <td>起司</td>\n","      <td>綿滑</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>3</td>\n","      <td>安哥拉</td>\n","      <td>豆苗</td>\n","      <td>西西里</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>4</td>\n","      <td>貝南</td>\n","      <td>蛋塔</td>\n","      <td>酥脆</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>5</td>\n","      <td>波札那</td>\n","      <td>鱸魚</td>\n","      <td>醋溜</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-3dcbe2a1-c585-4db2-bde7-a3d92d61d4b8')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-3dcbe2a1-c585-4db2-bde7-a3d92d61d4b8 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-3dcbe2a1-c585-4db2-bde7-a3d92d61d4b8');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-5a435063-a873-44f3-87cf-9634868a33d1\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-5a435063-a873-44f3-87cf-9634868a33d1')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-5a435063-a873-44f3-87cf-9634868a33d1 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df_dic","summary":"{\n  \"name\": \"df_dic\",\n  \"rows\": 623,\n  \"fields\": [\n    {\n      \"column\": \"id\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 179,\n        \"min\": 1,\n        \"max\": 623,\n        \"num_unique_values\": 623,\n        \"samples\": [\n          250,\n          559,\n          175\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Country\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 287,\n        \"samples\": [\n          \"\\u7dad\\u5fb7\\u89d2\",\n          \"\\u6258\\u514b\\u52de\",\n          \"\\u7acb\\u9676\\u5b9b\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Food Name\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 587,\n        \"samples\": [\n          \"\\u751f\\u8814\",\n          \"\\u6d77\\u9bae\\u8c46\\u8150\\u7fb9\",\n          \"\\u53ef\\u980c\\u9eb5\\u5305\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Taste\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 121,\n        \"samples\": [\n          \"\\u8591\",\n          \"\\u5c71\\u67f0\",\n          \"\\u918b\\u6e9c\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":98}]},{"cell_type":"code","source":["df_dic_path = '/gdrive/Shareddrives/從資料學習2/Dataset & code/cleaning data/df_dic.csv'\n","df_dic.to_csv(df_dic_path,index=False)"],"metadata":{"id":"e4lr8FI5FqIS"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/gdrive')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"hgeYFcemN9s3","executionInfo":{"status":"ok","timestamp":1712323383124,"user_tz":-480,"elapsed":21070,"user":{"displayName":"王晴","userId":"13545761289751374787"}},"outputId":"672e28bf-0194-48c3-a18b-87dcddaaf8be"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /gdrive\n"]}]},{"cell_type":"code","source":["df = df.loc[~df['keywords'].str.contains(r'\\[\\]')]"],"metadata":{"id":"JQYSkihdCZHZ"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import re\n","\n","def match_keywords(keywords, col_name, df_dic):\n","    matches = []\n","    for _, row in df_dic.iterrows():\n","        keyword_patterns = [re.escape(word) for word in str(row[col_name]).lower().split()]\n","        if any(re.search(r'\\b' + pattern + r'\\b', str(keywords).lower()) for pattern in keyword_patterns):\n","            matches.append(row[col_name])\n","    return ', '.join(matches)\n","\n","df[\"Country\"] = df[\"keywords_processed\"].apply(lambda x: match_keywords(x, \"Country\", df_dic),meta=('Country', 'object'))\n","df[\"Food Name\"] = df[\"keywords_processed\"].apply(lambda x: match_keywords(x, \"Food Name\", df_dic),meta=('Food Name', 'object'))\n","df[\"Taste\"] = df[\"keywords_processed\"].apply(lambda x: match_keywords(x, \"Taste\", df_dic),meta=('Taste', 'object'))"],"metadata":{"id":"vr6g_EfwBsui"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def match_keywords(keywords, col_column, df_dic):\n","  match = []\n","  for keywords in df():\n","    if any(keywords):\n","       match.append(row[col_name])"],"metadata":{"id":"a0n_CvRJsWYt"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def process_keywords(keywords_str):\n","    if isinstance(keywords_str, str):\n","        # Remove '[' and ']' characters from the string\n","        keywords_str = keywords_str.replace('[', '').replace(']', '')\n","        keywords_list = keywords_str.split(',')\n","        # Strip leading and trailing spaces from each keyword\n","        keywords_list = [keyword.strip() for keyword in keywords_list]\n","        return keywords_list\n","    else:\n","        return []\n","\n","# Apply the process_keywords function to the 'keywords' column\n","df['keywords_processed'] = df['keywords'].apply(process_keywords, meta=('object'))\n","\n","def match_keywords(keywords_list, col_name, df_dic):\n","    matches = []\n","    for _, row in df_dic.iterrows():\n","        for keyword in keywords_list:\n","            if keyword.lower() in str(row[col_name]).lower().split():\n","                matches.append(row[col_name])\n","    return ', '.join(set(matches))\n","\n","df[\"Country\"] = df[\"keywords_processed\"].apply(lambda x: match_keywords(x, \"Country\", df_dic), meta=('Country', 'object'))\n","df[\"Food Name\"] = df[\"keywords_processed\"].apply(lambda x: match_keywords(x, \"Food Name\", df_dic), meta=('Food Name', 'object'))\n","df[\"Taste\"] = df[\"keywords_processed\"].apply(lambda x: match_keywords(x, \"Taste\", df_dic), meta=('Taste', 'object'))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Cq8cu9i4xc-v","executionInfo":{"status":"ok","timestamp":1712338726225,"user_tz":-480,"elapsed":2033,"user":{"displayName":"王晴","userId":"13545761289751374787"}},"outputId":"155a29f1-e777-45fd-a36d-cd3159122100"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/dask/dataframe/core.py:7084: FutureWarning: Meta is not valid, `map_partitions` and `map_overlap` expects output to be a pandas object. Try passing a pandas object as meta or a dict or tuple representing the (name, dtype) of the columns. In the future the meta you passed will not work.\n","  warnings.warn(\n"]}]},{"cell_type":"code","source":["df.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":294},"id":"7uRnYsiIVfVJ","executionInfo":{"status":"error","timestamp":1712339750014,"user_tz":-480,"elapsed":1022665,"user":{"displayName":"王晴","userId":"13545761289751374787"}},"outputId":"50f063e7-bf00-4640-ccdb-a9a3c65d465c"},"execution_count":null,"outputs":[{"output_type":"error","ename":"KeyboardInterrupt","evalue":"","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-97-c42a15b2c7cf>\u001b[0m in \u001b[0;36m<cell line: 1>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mdf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhead\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/dask/dataframe/core.py\u001b[0m in \u001b[0;36mhead\u001b[0;34m(self, n, npartitions, compute)\u001b[0m\n\u001b[1;32m   1436\u001b[0m         \u001b[0;31m# No need to warn if we're already looking at all partitions\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1437\u001b[0m         \u001b[0msafe\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnpartitions\u001b[0m \u001b[0;34m!=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnpartitions\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1438\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_head\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mn\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mn\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnpartitions\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mnpartitions\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcompute\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcompute\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msafe\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0msafe\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1439\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1440\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_head\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mn\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnpartitions\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcompute\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msafe\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/dask/dataframe/core.py\u001b[0m in \u001b[0;36m_head\u001b[0;34m(self, n, npartitions, compute, safe)\u001b[0m\n\u001b[1;32m   1470\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1471\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mcompute\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1472\u001b[0;31m             \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mresult\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcompute\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1473\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mresult\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1474\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/dask/base.py\u001b[0m in \u001b[0;36mcompute\u001b[0;34m(self, **kwargs)\u001b[0m\n\u001b[1;32m    379\u001b[0m         \u001b[0mdask\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcompute\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    380\u001b[0m         \"\"\"\n\u001b[0;32m--> 381\u001b[0;31m         \u001b[0;34m(\u001b[0m\u001b[0mresult\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcompute\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtraverse\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    382\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mresult\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    383\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/dask/base.py\u001b[0m in \u001b[0;36mcompute\u001b[0;34m(traverse, optimize_graph, scheduler, get, *args, **kwargs)\u001b[0m\n\u001b[1;32m    664\u001b[0m         \u001b[0mpostcomputes\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__dask_postcompute__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    665\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 666\u001b[0;31m     \u001b[0mresults\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mschedule\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdsk\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkeys\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    667\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0mrepack\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mf\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mr\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0ma\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mr\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mf\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0ma\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mzip\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mresults\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mpostcomputes\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    668\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/dask/threaded.py\u001b[0m in \u001b[0;36mget\u001b[0;34m(dsk, keys, cache, num_workers, pool, **kwargs)\u001b[0m\n\u001b[1;32m     87\u001b[0m             \u001b[0mpool\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mMultiprocessingPoolExecutor\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpool\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     88\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 89\u001b[0;31m     results = get_async(\n\u001b[0m\u001b[1;32m     90\u001b[0m         \u001b[0mpool\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msubmit\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     91\u001b[0m         \u001b[0mpool\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_max_workers\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/dask/local.py\u001b[0m in \u001b[0;36mget_async\u001b[0;34m(submit, num_workers, dsk, result, cache, get_id, rerun_exceptions_locally, pack_exception, raise_exception, callbacks, dumps, loads, chunksize, **kwargs)\u001b[0m\n\u001b[1;32m    498\u001b[0m             \u001b[0;32mwhile\u001b[0m \u001b[0mstate\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"waiting\"\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0mstate\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"ready\"\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0mstate\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"running\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    499\u001b[0m                 \u001b[0mfire_tasks\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mchunksize\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 500\u001b[0;31m                 \u001b[0;32mfor\u001b[0m \u001b[0mkey\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mres_info\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfailed\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mqueue_get\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mqueue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mresult\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    501\u001b[0m                     \u001b[0;32mif\u001b[0m \u001b[0mfailed\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    502\u001b[0m                         \u001b[0mexc\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mloads\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mres_info\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/dask/local.py\u001b[0m in \u001b[0;36mqueue_get\u001b[0;34m(q)\u001b[0m\n\u001b[1;32m    135\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    136\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mqueue_get\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mq\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 137\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mq\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    138\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    139\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.10/queue.py\u001b[0m in \u001b[0;36mget\u001b[0;34m(self, block, timeout)\u001b[0m\n\u001b[1;32m    169\u001b[0m             \u001b[0;32melif\u001b[0m \u001b[0mtimeout\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    170\u001b[0m                 \u001b[0;32mwhile\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_qsize\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 171\u001b[0;31m                     \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnot_empty\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwait\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    172\u001b[0m             \u001b[0;32melif\u001b[0m \u001b[0mtimeout\u001b[0m \u001b[0;34m<\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    173\u001b[0m                 \u001b[0;32mraise\u001b[0m \u001b[0mValueError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"'timeout' must be a non-negative number\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.10/threading.py\u001b[0m in \u001b[0;36mwait\u001b[0;34m(self, timeout)\u001b[0m\n\u001b[1;32m    318\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m    \u001b[0;31m# restore state no matter what (e.g., KeyboardInterrupt)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    319\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mtimeout\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 320\u001b[0;31m                 \u001b[0mwaiter\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0macquire\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    321\u001b[0m                 \u001b[0mgotit\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mTrue\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    322\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyboardInterrupt\u001b[0m: "]}]},{"cell_type":"code","source":["output_df_path = '/gdrive/Shareddrives/從資料學習2/Dataset & code/cleaning data/restaurant_label2.csv'\n","df.to_csv(output_df_path, index=False, single_file=True)"],"metadata":{"id":"DRbp6CNAOUlL"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import pandas as pd\n","\n","# Create a helper function to match keywords\n","def match_keywords(keywords, col_name, df_dic):\n","    keywords = [keyword.lower() for keyword in keywords]\n","    matches = []\n","    for _, row in df_dic.iterrows():\n","        row_value = str(row[col_name]).lower()\n","        if any(keyword in row_value for keyword in keywords):\n","            matches.append(row[col_name])\n","    return ', '.join(matches)\n","\n","# Apply the match_keywords function to create the new columns\n","df['Country'] = df['keywords_processed'].apply(lambda x: match_keywords(x, 'Country', df_dic), meta=('Country', 'object'))\n","df['Food Name'] = df['keywords_processed'].apply(lambda x: match_keywords(x, 'Food Name', df_dic), meta=('Food Name', 'object'))\n","df['Taste'] = df['keywords_processed'].apply(lambda x: match_keywords(x, 'Taste', df_dic), meta=('Taste', 'object'))\n","\n","# Display the resulting DataFrame\n","print(df[['place_id', 'name', 'Country', 'Food Name', 'Taste']])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"JBWfIrUrabQQ","executionInfo":{"status":"ok","timestamp":1712340163953,"user_tz":-480,"elapsed":427,"user":{"displayName":"王晴","userId":"13545761289751374787"}},"outputId":"ac48e1b3-fd5a-47a7-dc25-ca1cfe4ca580"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Dask DataFrame Structure:\n","              place_id    name Country Food Name   Taste\n","npartitions=1                                           \n","                string  string  string    string  string\n","                   ...     ...     ...       ...     ...\n","Dask Name: getitem, 19 graph layers\n"]}]},{"cell_type":"code","source":["df.head(1)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":294},"id":"XyNLs3iJaz3Z","executionInfo":{"status":"error","timestamp":1712340294014,"user_tz":-480,"elapsed":1730,"user":{"displayName":"王晴","userId":"13545761289751374787"}},"outputId":"471ffffc-1932-4961-c990-0fbb8baf5c4f"},"execution_count":null,"outputs":[{"output_type":"error","ename":"TypeError","evalue":"sequence item 25: expected str instance, float found","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-112-c11b9b275432>\u001b[0m in \u001b[0;36m<cell line: 1>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mdf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhead\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/dask/threaded.py\u001b[0m in \u001b[0;36mget\u001b[0;34m(dsk, keys, cache, num_workers, pool, **kwargs)\u001b[0m\n\u001b[1;32m     87\u001b[0m             \u001b[0mpool\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mMultiprocessingPoolExecutor\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpool\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     88\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 89\u001b[0;31m     results = get_async(\n\u001b[0m\u001b[1;32m     90\u001b[0m         \u001b[0mpool\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msubmit\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     91\u001b[0m         \u001b[0mpool\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_max_workers\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/dask/local.py\u001b[0m in \u001b[0;36mget_async\u001b[0;34m(submit, num_workers, dsk, result, cache, get_id, rerun_exceptions_locally, pack_exception, raise_exception, callbacks, dumps, loads, chunksize, **kwargs)\u001b[0m\n\u001b[1;32m    509\u001b[0m                             \u001b[0m_execute_task\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtask\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdata\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;31m# Re-execute locally\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    510\u001b[0m                         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 511\u001b[0;31m                             \u001b[0mraise_exception\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mexc\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtb\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    512\u001b[0m                     \u001b[0mres\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mworker_id\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mloads\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mres_info\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    513\u001b[0m                     \u001b[0mstate\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"cache\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mres\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/dask/local.py\u001b[0m in \u001b[0;36mreraise\u001b[0;34m(exc, tb)\u001b[0m\n\u001b[1;32m    317\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mexc\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__traceback__\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mtb\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    318\u001b[0m         \u001b[0;32mraise\u001b[0m \u001b[0mexc\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwith_traceback\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtb\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 319\u001b[0;31m     \u001b[0;32mraise\u001b[0m \u001b[0mexc\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    320\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    321\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/dask/local.py\u001b[0m in \u001b[0;36mexecute_task\u001b[0;34m(key, task_info, dumps, loads, get_id, pack_exception)\u001b[0m\n\u001b[1;32m    222\u001b[0m     \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    223\u001b[0m         \u001b[0mtask\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdata\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mloads\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtask_info\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 224\u001b[0;31m         \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_execute_task\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtask\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdata\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    225\u001b[0m         \u001b[0mid\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mget_id\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    226\u001b[0m         \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdumps\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mresult\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mid\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/_libs/lib.pyx\u001b[0m in \u001b[0;36mpandas._libs.lib.map_infer\u001b[0;34m()\u001b[0m\n","\u001b[0;32m<ipython-input-110-561c3f194f75>\u001b[0m in \u001b[0;36m<lambda>\u001b[0;34m(x)\u001b[0m\n\u001b[1;32m     12\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     13\u001b[0m \u001b[0;31m# Apply the match_keywords function to create the new columns\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 14\u001b[0;31m \u001b[0mdf\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'Country'\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdf\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'keywords_processed'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mapply\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;32mlambda\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mmatch_keywords\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'Country'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdf_dic\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmeta\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'Country'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'object'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     15\u001b[0m \u001b[0mdf\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'Food Name'\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdf\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'keywords_processed'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mapply\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;32mlambda\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mmatch_keywords\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'Food Name'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdf_dic\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmeta\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'Food Name'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'object'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     16\u001b[0m \u001b[0mdf\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'Taste'\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdf\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'keywords_processed'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mapply\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;32mlambda\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mmatch_keywords\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'Taste'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdf_dic\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmeta\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'Taste'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'object'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-110-561c3f194f75>\u001b[0m in \u001b[0;36mmatch_keywords\u001b[0;34m(keywords, col_name, df_dic)\u001b[0m\n\u001b[1;32m      9\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0many\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkeyword\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mrow_value\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mkeyword\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mkeywords\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     10\u001b[0m             \u001b[0mmatches\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrow\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mcol_name\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 11\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0;34m', '\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mjoin\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmatches\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     12\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     13\u001b[0m \u001b[0;31m# Apply the match_keywords function to create the new columns\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mTypeError\u001b[0m: sequence item 25: expected str instance, float found"]}]}],"metadata":{"colab":{"provenance":[]},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}